package com.m2yazilim.tracker;

import org.junit.Assert;
import org.junit.Test;


import com.m2yazilim.tracker.dataaccess.factories.tracker.*;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.*;
import com.m2yazilim.tracker.dataaccess.services.data.DataLayerTracker;
import com.m2yazilim.tracker.dataaccess.services.data.DataLayerTrackerImpl;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.junit.runner.RunWith;
import org.springframework.transaction.annotation.Transactional;

/** Hibernate tester.
* @author autogenerated
*/
@SuppressWarnings("cast")
@ContextConfiguration(locations = { "/applicationContext.xml" } )
@RunWith(SpringJUnit4ClassRunner.class)
public class DAOIntegrationTest {
		

	/**
	 * Clears the database.
	 */
	@Test
	@Transactional
	public void testPreCleanDBFirstPass() {
		// We'll ignore any exceptions in this pass to give time for the custom exec to execute too 
		// (+ clear out any DB loops)
	
		try{HibernateTrackerDaoFactory.getTrackerAttachmentsDao().getQuery("delete from TrackerAttachments").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerRemindersDao().getQuery("delete from TrackerReminders").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerRelatedDao().getQuery("delete from TrackerRelated").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerNotificationsDao().getQuery("delete from TrackerNotifications").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerHistoryDao().getQuery("delete from TrackerHistory").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerDependenciesDao().getQuery("delete from TrackerDependencies").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerCommentsDao().getQuery("delete from TrackerComments").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerCacheDao().getQuery("delete from TrackerCache").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerAssignedDao().getQuery("delete from TrackerAssigned").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerAdminRequestsDao().getQuery("delete from TrackerAdminRequests").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerVotesDao().getQuery("delete from TrackerVotes").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerUsersInGroupsDao().getQuery("delete from TrackerUsersInGroups").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerTasksDao().getQuery("delete from TrackerTasks").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerListVersionDao().getQuery("delete from TrackerListVersion").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerListTasktypeDao().getQuery("delete from TrackerListTasktype").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerListStatusDao().getQuery("delete from TrackerListStatus").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerListResolutionDao().getQuery("delete from TrackerListResolution").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerListOsDao().getQuery("delete from TrackerListOs").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerListCategoryDao().getQuery("delete from TrackerListCategory").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerGroupsDao().getQuery("delete from TrackerGroups").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerSearchesDao().getQuery("delete from TrackerSearches").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerProjectsDao().getQuery("delete from TrackerProjects").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerUsersDao().getQuery("delete from TrackerUsers").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerRegistrationsDao().getQuery("delete from TrackerRegistrations").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerPrefsDao().getQuery("delete from TrackerPrefs").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerNotificationRecipientsDao().getQuery("delete from TrackerNotificationRecipients").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerNotificationMessagesDao().getQuery("delete from TrackerNotificationMessages").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerCityDao().getQuery("delete from TrackerCity").executeUpdate(); } catch (Exception e) { /* do nothing */ }


		
	}
	/**
	 * Clears the database.
	 */
	@Test
	@Transactional
	public void testPreCleanDBFinalPass() {
	
		HibernateTrackerDaoFactory.getTrackerAttachmentsDao().getQuery("delete from TrackerAttachments").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerRemindersDao().getQuery("delete from TrackerReminders").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerRelatedDao().getQuery("delete from TrackerRelated").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerNotificationsDao().getQuery("delete from TrackerNotifications").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerHistoryDao().getQuery("delete from TrackerHistory").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerDependenciesDao().getQuery("delete from TrackerDependencies").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerCommentsDao().getQuery("delete from TrackerComments").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerCacheDao().getQuery("delete from TrackerCache").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerAssignedDao().getQuery("delete from TrackerAssigned").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerAdminRequestsDao().getQuery("delete from TrackerAdminRequests").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerVotesDao().getQuery("delete from TrackerVotes").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerUsersInGroupsDao().getQuery("delete from TrackerUsersInGroups").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerTasksDao().getQuery("delete from TrackerTasks").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerListVersionDao().getQuery("delete from TrackerListVersion").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerListTasktypeDao().getQuery("delete from TrackerListTasktype").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerListStatusDao().getQuery("delete from TrackerListStatus").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerListResolutionDao().getQuery("delete from TrackerListResolution").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerListOsDao().getQuery("delete from TrackerListOs").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerListCategoryDao().getQuery("delete from TrackerListCategory").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerGroupsDao().getQuery("delete from TrackerGroups").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerSearchesDao().getQuery("delete from TrackerSearches").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerProjectsDao().getQuery("delete from TrackerProjects").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerUsersDao().getQuery("delete from TrackerUsers").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerRegistrationsDao().getQuery("delete from TrackerRegistrations").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerPrefsDao().getQuery("delete from TrackerPrefs").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerNotificationRecipientsDao().getQuery("delete from TrackerNotificationRecipients").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerNotificationMessagesDao().getQuery("delete from TrackerNotificationMessages").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerCityDao().getQuery("delete from TrackerCity").executeUpdate();


		
	}

	
	/**
	 * Hibernate test case for table: tracker.tracker_admin_requests.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testTrackerAdminRequests() throws CloneNotSupportedException {

	 	DataLayerTracker dataLayerTracker = DataLayerTrackerImpl.getInstance();
		TrackerAdminRequests trackerAdminRequests = TrackerDataPoolFactory.getTrackerAdminRequests();
		dataLayerTracker.saveOrUpdate(trackerAdminRequests);

		Integer trackerAdminRequestsId = trackerAdminRequests.getId();
		TrackerAdminRequests copy = trackerAdminRequests.clone();
		dataLayerTracker.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTracker.evict(trackerAdminRequests); 		 

		trackerAdminRequests = dataLayerTracker.getTrackerAdminRequests(trackerAdminRequestsId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getDenyReason(), trackerAdminRequests.getDenyReason());
		Assert.assertEquals(copy.getProject().getId(), trackerAdminRequests.getProject().getId());
		Assert.assertEquals(copy.getReasonGiven(), trackerAdminRequests.getReasonGiven());
		Assert.assertEquals(copy.getRequestType(), trackerAdminRequests.getRequestType());
		Assert.assertEquals(copy.getResolvedBy().getId(), trackerAdminRequests.getResolvedBy().getId());
		Assert.assertEquals(copy.getSubmittedBy().getId(), trackerAdminRequests.getSubmittedBy().getId());
		Assert.assertEquals(copy.getTask().getId(), trackerAdminRequests.getTask().getId());
		Assert.assertEquals(copy.getTimeResolved(), trackerAdminRequests.getTimeResolved());
		Assert.assertEquals(copy.getTimeSubmitted(), trackerAdminRequests.getTimeSubmitted());
		Assert.assertEquals(copy.getVersion(), trackerAdminRequests.getVersion());
		// tests for coverage completeness
		Assert.assertFalse(trackerAdminRequests.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(trackerAdminRequests.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: tracker.tracker_assigned.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testTrackerAssigned() throws CloneNotSupportedException {

	 	DataLayerTracker dataLayerTracker = DataLayerTrackerImpl.getInstance();
		TrackerAssigned trackerAssigned = TrackerDataPoolFactory.getTrackerAssigned();
		dataLayerTracker.saveOrUpdate(trackerAssigned);

		Integer trackerAssignedId = trackerAssigned.getId();
		TrackerAssigned copy = trackerAssigned.clone();
		dataLayerTracker.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTracker.evict(trackerAssigned); 		 

		trackerAssigned = dataLayerTracker.getTrackerAssigned(trackerAssignedId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getTask().getId(), trackerAssigned.getTask().getId());
		Assert.assertEquals(copy.getUser().getId(), trackerAssigned.getUser().getId());
		Assert.assertEquals(copy.getVersion(), trackerAssigned.getVersion());
		// tests for coverage completeness
		Assert.assertFalse(trackerAssigned.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(trackerAssigned.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: tracker.tracker_attachments.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testTrackerAttachments() throws CloneNotSupportedException {

	 	DataLayerTracker dataLayerTracker = DataLayerTrackerImpl.getInstance();
		TrackerAttachments trackerAttachments = TrackerDataPoolFactory.getTrackerAttachments();
		dataLayerTracker.saveOrUpdate(trackerAttachments);

		Integer trackerAttachmentsId = trackerAttachments.getId();
		TrackerAttachments copy = trackerAttachments.clone();
		dataLayerTracker.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTracker.evict(trackerAttachments); 		 

		trackerAttachments = dataLayerTracker.getTrackerAttachments(trackerAttachmentsId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getAddedBy().getId(), trackerAttachments.getAddedBy().getId());
		Assert.assertEquals(copy.getComment().getId(), trackerAttachments.getComment().getId());
		Assert.assertEquals(copy.getDateAdded(), trackerAttachments.getDateAdded());
		Assert.assertEquals(copy.getFileName(), trackerAttachments.getFileName());
		Assert.assertEquals(copy.getFileSize(), trackerAttachments.getFileSize());
		Assert.assertEquals(copy.getFileType(), trackerAttachments.getFileType());
		Assert.assertEquals(copy.getOrigName(), trackerAttachments.getOrigName());
		Assert.assertEquals(copy.getTask().getId(), trackerAttachments.getTask().getId());
		Assert.assertEquals(copy.getVersion(), trackerAttachments.getVersion());
		// tests for coverage completeness
		Assert.assertFalse(trackerAttachments.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(trackerAttachments.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: tracker.tracker_cache.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testTrackerCache() throws CloneNotSupportedException {

	 	DataLayerTracker dataLayerTracker = DataLayerTrackerImpl.getInstance();
		TrackerCache trackerCache = TrackerDataPoolFactory.getTrackerCache();
		dataLayerTracker.saveOrUpdate(trackerCache);

		Integer trackerCacheId = trackerCache.getId();
		TrackerCache copy = trackerCache.clone();
		dataLayerTracker.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTracker.evict(trackerCache); 		 

		trackerCache = dataLayerTracker.getTrackerCache(trackerCacheId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getContent(), trackerCache.getContent());
		Assert.assertEquals(copy.getLastUpdated(), trackerCache.getLastUpdated());
		Assert.assertEquals(copy.getMaxItems(), trackerCache.getMaxItems());
		Assert.assertEquals(copy.getProject().getId(), trackerCache.getProject().getId());
		Assert.assertEquals(copy.getTopic(), trackerCache.getTopic());
		Assert.assertEquals(copy.getType(), trackerCache.getType());
		Assert.assertEquals(copy.getVersion(), trackerCache.getVersion());
		// tests for coverage completeness
		Assert.assertFalse(trackerCache.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(trackerCache.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: tracker.tracker_city.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testTrackerCity() throws CloneNotSupportedException {

	 	DataLayerTracker dataLayerTracker = DataLayerTrackerImpl.getInstance();
		TrackerCity trackerCity = TrackerDataPoolFactory.getTrackerCity();
		dataLayerTracker.saveOrUpdate(trackerCity);

		Integer trackerCityId = trackerCity.getId();
		TrackerCity copy = trackerCity.clone();
		dataLayerTracker.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTracker.evict(trackerCity); 		 

		trackerCity = dataLayerTracker.getTrackerCity(trackerCityId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getCityName(), trackerCity.getCityName());
		Assert.assertEquals(copy.getVersion(), trackerCity.getVersion());
		// tests for coverage completeness
		Assert.assertFalse(trackerCity.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(trackerCity.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: tracker.tracker_comments.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testTrackerComments() throws CloneNotSupportedException {

	 	DataLayerTracker dataLayerTracker = DataLayerTrackerImpl.getInstance();
		TrackerComments trackerComments = TrackerDataPoolFactory.getTrackerComments();
		dataLayerTracker.saveOrUpdate(trackerComments);

		Integer trackerCommentsId = trackerComments.getId();
		TrackerComments copy = trackerComments.clone();
		dataLayerTracker.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTracker.evict(trackerComments); 		 

		trackerComments = dataLayerTracker.getTrackerComments(trackerCommentsId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getCommentText(), trackerComments.getCommentText());
		Assert.assertEquals(copy.getDateAdded(), trackerComments.getDateAdded());
		Assert.assertEquals(copy.getLastEditedTime(), trackerComments.getLastEditedTime());
		Assert.assertEquals(copy.getTask().getId(), trackerComments.getTask().getId());
		Assert.assertEquals(copy.getUser().getId(), trackerComments.getUser().getId());
		Assert.assertEquals(copy.getVersion(), trackerComments.getVersion());
		// tests for coverage completeness
		Assert.assertFalse(trackerComments.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(trackerComments.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: tracker.tracker_dependencies.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testTrackerDependencies() throws CloneNotSupportedException {

	 	DataLayerTracker dataLayerTracker = DataLayerTrackerImpl.getInstance();
		TrackerDependencies trackerDependencies = TrackerDataPoolFactory.getTrackerDependencies();
		dataLayerTracker.saveOrUpdate(trackerDependencies);

		Integer trackerDependenciesId = trackerDependencies.getId();
		TrackerDependencies copy = trackerDependencies.clone();
		dataLayerTracker.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTracker.evict(trackerDependencies); 		 

		trackerDependencies = dataLayerTracker.getTrackerDependencies(trackerDependenciesId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getDepTask().getId(), trackerDependencies.getDepTask().getId());
		Assert.assertEquals(copy.getTask().getId(), trackerDependencies.getTask().getId());
		Assert.assertEquals(copy.getVersion(), trackerDependencies.getVersion());
		// tests for coverage completeness
		Assert.assertFalse(trackerDependencies.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(trackerDependencies.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: tracker.tracker_groups.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testTrackerGroups() throws CloneNotSupportedException {

	 	DataLayerTracker dataLayerTracker = DataLayerTrackerImpl.getInstance();
		TrackerGroups trackerGroups = TrackerDataPoolFactory.getTrackerGroups();
		dataLayerTracker.saveOrUpdate(trackerGroups);

		Integer trackerGroupsId = trackerGroups.getId();
		TrackerGroups copy = trackerGroups.clone();
		dataLayerTracker.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTracker.evict(trackerGroups); 		 

		trackerGroups = dataLayerTracker.getTrackerGroups(trackerGroupsId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getAddComments(), trackerGroups.getAddComments());
		Assert.assertEquals(copy.getAddToAssignees(), trackerGroups.getAddToAssignees());
		Assert.assertEquals(copy.getAddVotes(), trackerGroups.getAddVotes());
		Assert.assertEquals(copy.getAssignOthersToSelf(), trackerGroups.getAssignOthersToSelf());
		Assert.assertEquals(copy.getAssignToSelf(), trackerGroups.getAssignToSelf());
		Assert.assertEquals(copy.getCloseOtherTasks(), trackerGroups.getCloseOtherTasks());
		Assert.assertEquals(copy.getCloseOwnTasks(), trackerGroups.getCloseOwnTasks());
		Assert.assertEquals(copy.getCreateAttachments(), trackerGroups.getCreateAttachments());
		Assert.assertEquals(copy.getDeleteAttachments(), trackerGroups.getDeleteAttachments());
		Assert.assertEquals(copy.getDeleteComments(), trackerGroups.getDeleteComments());
		Assert.assertEquals(copy.getEditAssignments(), trackerGroups.getEditAssignments());
		Assert.assertEquals(copy.getEditComments(), trackerGroups.getEditComments());
		Assert.assertEquals(copy.getEditOwnComments(), trackerGroups.getEditOwnComments());
		Assert.assertEquals(copy.getGroupDesc(), trackerGroups.getGroupDesc());
		Assert.assertEquals(copy.getGroupName(), trackerGroups.getGroupName());
		Assert.assertEquals(copy.getGroupOpen(), trackerGroups.getGroupOpen());
		Assert.assertEquals(copy.getIsAdmin(), trackerGroups.getIsAdmin());
		Assert.assertEquals(copy.getManageProject(), trackerGroups.getManageProject());
		Assert.assertEquals(copy.getModifyAllTasks(), trackerGroups.getModifyAllTasks());
		Assert.assertEquals(copy.getModifyOwnTasks(), trackerGroups.getModifyOwnTasks());
		Assert.assertEquals(copy.getOpenNewTasks(), trackerGroups.getOpenNewTasks());
		Assert.assertEquals(copy.getProject().getId(), trackerGroups.getProject().getId());
		Assert.assertEquals(copy.getShowAsAssignees(), trackerGroups.getShowAsAssignees());
		Assert.assertEquals(copy.getVersion(), trackerGroups.getVersion());
		Assert.assertEquals(copy.getViewComments(), trackerGroups.getViewComments());
		Assert.assertEquals(copy.getViewHistory(), trackerGroups.getViewHistory());
		Assert.assertEquals(copy.getViewReports(), trackerGroups.getViewReports());
		Assert.assertEquals(copy.getViewTasks(), trackerGroups.getViewTasks());
		// tests for coverage completeness
		Assert.assertFalse(trackerGroups.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(trackerGroups.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: tracker.tracker_history.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testTrackerHistory() throws CloneNotSupportedException {

	 	DataLayerTracker dataLayerTracker = DataLayerTrackerImpl.getInstance();
		TrackerHistory trackerHistory = TrackerDataPoolFactory.getTrackerHistory();
		dataLayerTracker.saveOrUpdate(trackerHistory);

		Integer trackerHistoryId = trackerHistory.getId();
		TrackerHistory copy = trackerHistory.clone();
		dataLayerTracker.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTracker.evict(trackerHistory); 		 

		trackerHistory = dataLayerTracker.getTrackerHistory(trackerHistoryId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getEventDate(), trackerHistory.getEventDate());
		Assert.assertEquals(copy.getEventType(), trackerHistory.getEventType());
		Assert.assertEquals(copy.getFieldChanged(), trackerHistory.getFieldChanged());
		Assert.assertEquals(copy.getNewValue(), trackerHistory.getNewValue());
		Assert.assertEquals(copy.getOldValue(), trackerHistory.getOldValue());
		Assert.assertEquals(copy.getTask().getId(), trackerHistory.getTask().getId());
		Assert.assertEquals(copy.getUser().getId(), trackerHistory.getUser().getId());
		Assert.assertEquals(copy.getVersion(), trackerHistory.getVersion());
		// tests for coverage completeness
		Assert.assertFalse(trackerHistory.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(trackerHistory.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: tracker.tracker_list_category.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testTrackerListCategory() throws CloneNotSupportedException {

	 	DataLayerTracker dataLayerTracker = DataLayerTrackerImpl.getInstance();
		TrackerListCategory trackerListCategory = TrackerDataPoolFactory.getTrackerListCategory();
		dataLayerTracker.saveOrUpdate(trackerListCategory);

		Integer trackerListCategoryId = trackerListCategory.getId();
		TrackerListCategory copy = trackerListCategory.clone();
		dataLayerTracker.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTracker.evict(trackerListCategory); 		 

		trackerListCategory = dataLayerTracker.getTrackerListCategory(trackerListCategoryId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getCategoryName(), trackerListCategory.getCategoryName());
		Assert.assertEquals(copy.getCategoryOwner().getId(), trackerListCategory.getCategoryOwner().getId());
		Assert.assertEquals(copy.getLft(), trackerListCategory.getLft());
		Assert.assertEquals(copy.getProject().getId(), trackerListCategory.getProject().getId());
		Assert.assertEquals(copy.getRgt(), trackerListCategory.getRgt());
		Assert.assertEquals(copy.getShowInList(), trackerListCategory.getShowInList());
		Assert.assertEquals(copy.getVersion(), trackerListCategory.getVersion());
		// tests for coverage completeness
		Assert.assertFalse(trackerListCategory.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(trackerListCategory.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: tracker.tracker_list_os.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testTrackerListOs() throws CloneNotSupportedException {

	 	DataLayerTracker dataLayerTracker = DataLayerTrackerImpl.getInstance();
		TrackerListOs trackerListOs = TrackerDataPoolFactory.getTrackerListOs();
		dataLayerTracker.saveOrUpdate(trackerListOs);

		Integer trackerListOsId = trackerListOs.getId();
		TrackerListOs copy = trackerListOs.clone();
		dataLayerTracker.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTracker.evict(trackerListOs); 		 

		trackerListOs = dataLayerTracker.getTrackerListOs(trackerListOsId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getListPosition(), trackerListOs.getListPosition());
		Assert.assertEquals(copy.getOsName(), trackerListOs.getOsName());
		Assert.assertEquals(copy.getProject().getId(), trackerListOs.getProject().getId());
		Assert.assertEquals(copy.getShowInList(), trackerListOs.getShowInList());
		Assert.assertEquals(copy.getVersion(), trackerListOs.getVersion());
		// tests for coverage completeness
		Assert.assertFalse(trackerListOs.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(trackerListOs.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: tracker.tracker_list_resolution.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testTrackerListResolution() throws CloneNotSupportedException {

	 	DataLayerTracker dataLayerTracker = DataLayerTrackerImpl.getInstance();
		TrackerListResolution trackerListResolution = TrackerDataPoolFactory.getTrackerListResolution();
		dataLayerTracker.saveOrUpdate(trackerListResolution);

		Integer trackerListResolutionId = trackerListResolution.getId();
		TrackerListResolution copy = trackerListResolution.clone();
		dataLayerTracker.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTracker.evict(trackerListResolution); 		 

		trackerListResolution = dataLayerTracker.getTrackerListResolution(trackerListResolutionId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getListPosition(), trackerListResolution.getListPosition());
		Assert.assertEquals(copy.getProject().getId(), trackerListResolution.getProject().getId());
		Assert.assertEquals(copy.getResolutionName(), trackerListResolution.getResolutionName());
		Assert.assertEquals(copy.getShowInList(), trackerListResolution.getShowInList());
		Assert.assertEquals(copy.getVersion(), trackerListResolution.getVersion());
		// tests for coverage completeness
		Assert.assertFalse(trackerListResolution.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(trackerListResolution.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: tracker.tracker_list_status.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testTrackerListStatus() throws CloneNotSupportedException {

	 	DataLayerTracker dataLayerTracker = DataLayerTrackerImpl.getInstance();
		TrackerListStatus trackerListStatus = TrackerDataPoolFactory.getTrackerListStatus();
		dataLayerTracker.saveOrUpdate(trackerListStatus);

		Integer trackerListStatusId = trackerListStatus.getId();
		TrackerListStatus copy = trackerListStatus.clone();
		dataLayerTracker.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTracker.evict(trackerListStatus); 		 

		trackerListStatus = dataLayerTracker.getTrackerListStatus(trackerListStatusId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getListPosition(), trackerListStatus.getListPosition());
		Assert.assertEquals(copy.getProject().getId(), trackerListStatus.getProject().getId());
		Assert.assertEquals(copy.getShowInList(), trackerListStatus.getShowInList());
		Assert.assertEquals(copy.getStatusName(), trackerListStatus.getStatusName());
		Assert.assertEquals(copy.getVersion(), trackerListStatus.getVersion());
		// tests for coverage completeness
		Assert.assertFalse(trackerListStatus.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(trackerListStatus.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: tracker.tracker_list_tasktype.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testTrackerListTasktype() throws CloneNotSupportedException {

	 	DataLayerTracker dataLayerTracker = DataLayerTrackerImpl.getInstance();
		TrackerListTasktype trackerListTasktype = TrackerDataPoolFactory.getTrackerListTasktype();
		dataLayerTracker.saveOrUpdate(trackerListTasktype);

		Integer trackerListTasktypeId = trackerListTasktype.getId();
		TrackerListTasktype copy = trackerListTasktype.clone();
		dataLayerTracker.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTracker.evict(trackerListTasktype); 		 

		trackerListTasktype = dataLayerTracker.getTrackerListTasktype(trackerListTasktypeId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getListPosition(), trackerListTasktype.getListPosition());
		Assert.assertEquals(copy.getProject().getId(), trackerListTasktype.getProject().getId());
		Assert.assertEquals(copy.getShowInList(), trackerListTasktype.getShowInList());
		Assert.assertEquals(copy.getTasktypeName(), trackerListTasktype.getTasktypeName());
		Assert.assertEquals(copy.getVersion(), trackerListTasktype.getVersion());
		// tests for coverage completeness
		Assert.assertFalse(trackerListTasktype.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(trackerListTasktype.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: tracker.tracker_list_version.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testTrackerListVersion() throws CloneNotSupportedException {

	 	DataLayerTracker dataLayerTracker = DataLayerTrackerImpl.getInstance();
		TrackerListVersion trackerListVersion = TrackerDataPoolFactory.getTrackerListVersion();
		dataLayerTracker.saveOrUpdate(trackerListVersion);

		Integer trackerListVersionId = trackerListVersion.getId();
		TrackerListVersion copy = trackerListVersion.clone();
		dataLayerTracker.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTracker.evict(trackerListVersion); 		 

		trackerListVersion = dataLayerTracker.getTrackerListVersion(trackerListVersionId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getListPosition(), trackerListVersion.getListPosition());
		Assert.assertEquals(copy.getProject().getId(), trackerListVersion.getProject().getId());
		Assert.assertEquals(copy.getShowInList(), trackerListVersion.getShowInList());
		Assert.assertEquals(copy.getVersion(), trackerListVersion.getVersion());
		Assert.assertEquals(copy.getVersionName(), trackerListVersion.getVersionName());
		Assert.assertEquals(copy.getVersionTense(), trackerListVersion.getVersionTense());
		// tests for coverage completeness
		Assert.assertFalse(trackerListVersion.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(trackerListVersion.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: tracker.tracker_notification_messages.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testTrackerNotificationMessages() throws CloneNotSupportedException {

	 	DataLayerTracker dataLayerTracker = DataLayerTrackerImpl.getInstance();
		TrackerNotificationMessages trackerNotificationMessages = TrackerDataPoolFactory.getTrackerNotificationMessages();
		dataLayerTracker.saveOrUpdate(trackerNotificationMessages);

		Integer trackerNotificationMessagesId = trackerNotificationMessages.getId();
		TrackerNotificationMessages copy = trackerNotificationMessages.clone();
		dataLayerTracker.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTracker.evict(trackerNotificationMessages); 		 

		trackerNotificationMessages = dataLayerTracker.getTrackerNotificationMessages(trackerNotificationMessagesId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getMessageBody(), trackerNotificationMessages.getMessageBody());
		Assert.assertEquals(copy.getMessageSubject(), trackerNotificationMessages.getMessageSubject());
		Assert.assertEquals(copy.getTimeCreated(), trackerNotificationMessages.getTimeCreated());
		Assert.assertEquals(copy.getVersion(), trackerNotificationMessages.getVersion());
		// tests for coverage completeness
		Assert.assertFalse(trackerNotificationMessages.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(trackerNotificationMessages.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: tracker.tracker_notification_recipients.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testTrackerNotificationRecipients() throws CloneNotSupportedException {

	 	DataLayerTracker dataLayerTracker = DataLayerTrackerImpl.getInstance();
		TrackerNotificationRecipients trackerNotificationRecipients = TrackerDataPoolFactory.getTrackerNotificationRecipients();
		dataLayerTracker.saveOrUpdate(trackerNotificationRecipients);

		Integer trackerNotificationRecipientsId = trackerNotificationRecipients.getId();
		TrackerNotificationRecipients copy = trackerNotificationRecipients.clone();
		dataLayerTracker.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTracker.evict(trackerNotificationRecipients); 		 

		trackerNotificationRecipients = dataLayerTracker.getTrackerNotificationRecipients(trackerNotificationRecipientsId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getMessage().getId(), trackerNotificationRecipients.getMessage().getId());
		Assert.assertEquals(copy.getNotifyAddress(), trackerNotificationRecipients.getNotifyAddress());
		Assert.assertEquals(copy.getNotifyMethod(), trackerNotificationRecipients.getNotifyMethod());
		Assert.assertEquals(copy.getVersion(), trackerNotificationRecipients.getVersion());
		// tests for coverage completeness
		Assert.assertFalse(trackerNotificationRecipients.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(trackerNotificationRecipients.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: tracker.tracker_notifications.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testTrackerNotifications() throws CloneNotSupportedException {

	 	DataLayerTracker dataLayerTracker = DataLayerTrackerImpl.getInstance();
		TrackerNotifications trackerNotifications = TrackerDataPoolFactory.getTrackerNotifications();
		dataLayerTracker.saveOrUpdate(trackerNotifications);

		Integer trackerNotificationsId = trackerNotifications.getId();
		TrackerNotifications copy = trackerNotifications.clone();
		dataLayerTracker.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTracker.evict(trackerNotifications); 		 

		trackerNotifications = dataLayerTracker.getTrackerNotifications(trackerNotificationsId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getTask().getId(), trackerNotifications.getTask().getId());
		Assert.assertEquals(copy.getUser().getId(), trackerNotifications.getUser().getId());
		Assert.assertEquals(copy.getVersion(), trackerNotifications.getVersion());
		// tests for coverage completeness
		Assert.assertFalse(trackerNotifications.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(trackerNotifications.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: tracker.tracker_prefs.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testTrackerPrefs() throws CloneNotSupportedException {

	 	DataLayerTracker dataLayerTracker = DataLayerTrackerImpl.getInstance();
		TrackerPrefs trackerPrefs = TrackerDataPoolFactory.getTrackerPrefs();
		dataLayerTracker.saveOrUpdate(trackerPrefs);

		Integer trackerPrefsId = trackerPrefs.getId();
		TrackerPrefs copy = trackerPrefs.clone();
		dataLayerTracker.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTracker.evict(trackerPrefs); 		 

		trackerPrefs = dataLayerTracker.getTrackerPrefs(trackerPrefsId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getPrefName(), trackerPrefs.getPrefName());
		Assert.assertEquals(copy.getPrefValue(), trackerPrefs.getPrefValue());
		Assert.assertEquals(copy.getVersion(), trackerPrefs.getVersion());
		// tests for coverage completeness
		Assert.assertFalse(trackerPrefs.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(trackerPrefs.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: tracker.tracker_projects.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testTrackerProjects() throws CloneNotSupportedException {

	 	DataLayerTracker dataLayerTracker = DataLayerTrackerImpl.getInstance();
		TrackerProjects trackerProjects = TrackerDataPoolFactory.getTrackerProjects();
		dataLayerTracker.saveOrUpdate(trackerProjects);

		Integer trackerProjectsId = trackerProjects.getId();
		TrackerProjects copy = trackerProjects.clone();
		dataLayerTracker.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTracker.evict(trackerProjects); 		 

		trackerProjects = dataLayerTracker.getTrackerProjects(trackerProjectsId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getAnonOpen(), trackerProjects.getAnonOpen());
		Assert.assertEquals(copy.getAutoAssign(), trackerProjects.getAutoAssign());
		Assert.assertEquals(copy.getCommentClosed(), trackerProjects.getCommentClosed());
		Assert.assertEquals(copy.getDefaultCatOwner().getId(), trackerProjects.getDefaultCatOwner().getId());
		Assert.assertEquals(copy.getDefaultEntry(), trackerProjects.getDefaultEntry());
		Assert.assertEquals(copy.getDefaultTask(), trackerProjects.getDefaultTask());
		Assert.assertEquals(copy.getFeedDescription(), trackerProjects.getFeedDescription());
		Assert.assertEquals(copy.getFeedImgUrl(), trackerProjects.getFeedImgUrl());
		Assert.assertEquals(copy.getIntroMessage(), trackerProjects.getIntroMessage());
		Assert.assertEquals(copy.getLangCode(), trackerProjects.getLangCode());
		Assert.assertEquals(copy.getLastUpdated(), trackerProjects.getLastUpdated());
		Assert.assertEquals(copy.getNotifyEmail(), trackerProjects.getNotifyEmail());
		Assert.assertEquals(copy.getNotifyJabber(), trackerProjects.getNotifyJabber());
		Assert.assertEquals(copy.getNotifyReply(), trackerProjects.getNotifyReply());
		Assert.assertEquals(copy.getNotifySubject(), trackerProjects.getNotifySubject());
		Assert.assertEquals(copy.getNotifyTypes(), trackerProjects.getNotifyTypes());
		Assert.assertEquals(copy.getOthersView(), trackerProjects.getOthersView());
		Assert.assertEquals(copy.getProjectIsActive(), trackerProjects.getProjectIsActive());
		Assert.assertEquals(copy.getProjectTitle(), trackerProjects.getProjectTitle());
		Assert.assertEquals(copy.getThemeStyle(), trackerProjects.getThemeStyle());
		Assert.assertEquals(copy.getVersion(), trackerProjects.getVersion());
		Assert.assertEquals(copy.getVisibleColumns(), trackerProjects.getVisibleColumns());
		// tests for coverage completeness
		Assert.assertFalse(trackerProjects.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(trackerProjects.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: tracker.tracker_registrations.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testTrackerRegistrations() throws CloneNotSupportedException {

	 	DataLayerTracker dataLayerTracker = DataLayerTrackerImpl.getInstance();
		TrackerRegistrations trackerRegistrations = TrackerDataPoolFactory.getTrackerRegistrations();
		dataLayerTracker.saveOrUpdate(trackerRegistrations);

		Integer trackerRegistrationsId = trackerRegistrations.getId();
		TrackerRegistrations copy = trackerRegistrations.clone();
		dataLayerTracker.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTracker.evict(trackerRegistrations); 		 

		trackerRegistrations = dataLayerTracker.getTrackerRegistrations(trackerRegistrationsId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getConfirmCode(), trackerRegistrations.getConfirmCode());
		Assert.assertEquals(copy.getEmailAddress(), trackerRegistrations.getEmailAddress());
		Assert.assertEquals(copy.getJabberId(), trackerRegistrations.getJabberId());
		Assert.assertEquals(copy.getMagicUrl(), trackerRegistrations.getMagicUrl());
		Assert.assertEquals(copy.getNotifyType(), trackerRegistrations.getNotifyType());
		Assert.assertEquals(copy.getRealName(), trackerRegistrations.getRealName());
		Assert.assertEquals(copy.getRegTime(), trackerRegistrations.getRegTime());
		Assert.assertEquals(copy.getTimeZone(), trackerRegistrations.getTimeZone());
		Assert.assertEquals(copy.getUserName(), trackerRegistrations.getUserName());
		Assert.assertEquals(copy.getVersion(), trackerRegistrations.getVersion());
		// tests for coverage completeness
		Assert.assertFalse(trackerRegistrations.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(trackerRegistrations.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: tracker.tracker_related.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testTrackerRelated() throws CloneNotSupportedException {

	 	DataLayerTracker dataLayerTracker = DataLayerTrackerImpl.getInstance();
		TrackerRelated trackerRelated = TrackerDataPoolFactory.getTrackerRelated();
		dataLayerTracker.saveOrUpdate(trackerRelated);

		Integer trackerRelatedId = trackerRelated.getId();
		TrackerRelated copy = trackerRelated.clone();
		dataLayerTracker.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTracker.evict(trackerRelated); 		 

		trackerRelated = dataLayerTracker.getTrackerRelated(trackerRelatedId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getIsDuplicate(), trackerRelated.getIsDuplicate());
		Assert.assertEquals(copy.getRelatedTask().getId(), trackerRelated.getRelatedTask().getId());
		Assert.assertEquals(copy.getThisTask().getId(), trackerRelated.getThisTask().getId());
		Assert.assertEquals(copy.getVersion(), trackerRelated.getVersion());
		// tests for coverage completeness
		Assert.assertFalse(trackerRelated.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(trackerRelated.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: tracker.tracker_reminders.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testTrackerReminders() throws CloneNotSupportedException {

	 	DataLayerTracker dataLayerTracker = DataLayerTrackerImpl.getInstance();
		TrackerReminders trackerReminders = TrackerDataPoolFactory.getTrackerReminders();
		dataLayerTracker.saveOrUpdate(trackerReminders);

		Integer trackerRemindersId = trackerReminders.getId();
		TrackerReminders copy = trackerReminders.clone();
		dataLayerTracker.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTracker.evict(trackerReminders); 		 

		trackerReminders = dataLayerTracker.getTrackerReminders(trackerRemindersId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getFromUser().getId(), trackerReminders.getFromUser().getId());
		Assert.assertEquals(copy.getHowOften(), trackerReminders.getHowOften());
		Assert.assertEquals(copy.getLastSent(), trackerReminders.getLastSent());
		Assert.assertEquals(copy.getReminderMessage(), trackerReminders.getReminderMessage());
		Assert.assertEquals(copy.getStartTime(), trackerReminders.getStartTime());
		Assert.assertEquals(copy.getTask().getId(), trackerReminders.getTask().getId());
		Assert.assertEquals(copy.getToUser().getId(), trackerReminders.getToUser().getId());
		Assert.assertEquals(copy.getVersion(), trackerReminders.getVersion());
		// tests for coverage completeness
		Assert.assertFalse(trackerReminders.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(trackerReminders.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: tracker.tracker_searches.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testTrackerSearches() throws CloneNotSupportedException {

	 	DataLayerTracker dataLayerTracker = DataLayerTrackerImpl.getInstance();
		TrackerSearches trackerSearches = TrackerDataPoolFactory.getTrackerSearches();
		dataLayerTracker.saveOrUpdate(trackerSearches);

		Integer trackerSearchesId = trackerSearches.getId();
		TrackerSearches copy = trackerSearches.clone();
		dataLayerTracker.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTracker.evict(trackerSearches); 		 

		trackerSearches = dataLayerTracker.getTrackerSearches(trackerSearchesId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getName(), trackerSearches.getName());
		Assert.assertEquals(copy.getSearchString(), trackerSearches.getSearchString());
		Assert.assertEquals(copy.getTime(), trackerSearches.getTime());
		Assert.assertEquals(copy.getUser().getId(), trackerSearches.getUser().getId());
		Assert.assertEquals(copy.getVersion(), trackerSearches.getVersion());
		// tests for coverage completeness
		Assert.assertFalse(trackerSearches.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(trackerSearches.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: tracker.tracker_tasks.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testTrackerTasks() throws CloneNotSupportedException {

	 	DataLayerTracker dataLayerTracker = DataLayerTrackerImpl.getInstance();
		TrackerTasks trackerTasks = TrackerDataPoolFactory.getTrackerTasks();
		dataLayerTracker.saveOrUpdate(trackerTasks);

		Integer trackerTasksId = trackerTasks.getId();
		TrackerTasks copy = trackerTasks.clone();
		dataLayerTracker.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTracker.evict(trackerTasks); 		 

		trackerTasks = dataLayerTracker.getTrackerTasks(trackerTasksId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getAddress(), trackerTasks.getAddress());
		Assert.assertEquals(copy.getAnonEmail(), trackerTasks.getAnonEmail());
		Assert.assertEquals(copy.getClosedbyVersion(), trackerTasks.getClosedbyVersion());
		Assert.assertEquals(copy.getClosedBy().getId(), trackerTasks.getClosedBy().getId());
		Assert.assertEquals(copy.getClosureComment(), trackerTasks.getClosureComment());
		Assert.assertEquals(copy.getDateClosed(), trackerTasks.getDateClosed());
		Assert.assertEquals(copy.getDateOpened(), trackerTasks.getDateOpened());
		Assert.assertEquals(copy.getDetailedDesc(), trackerTasks.getDetailedDesc());
		Assert.assertEquals(copy.getDueDate(), trackerTasks.getDueDate());
		Assert.assertEquals(copy.getIsClosed(), trackerTasks.getIsClosed());
		Assert.assertEquals(copy.getItemStatus().getId(), trackerTasks.getItemStatus().getId());
		Assert.assertEquals(copy.getItemSummary(), trackerTasks.getItemSummary());
		Assert.assertEquals(copy.getLastEditedBy().getId(), trackerTasks.getLastEditedBy().getId());
		Assert.assertEquals(copy.getLastEditedTime(), trackerTasks.getLastEditedTime());
		Assert.assertEquals(copy.getLatitude(), trackerTasks.getLatitude());
		Assert.assertEquals(copy.getLongitude(), trackerTasks.getLongitude());
		Assert.assertEquals(copy.getMarkPrivate(), trackerTasks.getMarkPrivate());
		Assert.assertEquals(copy.getOpenedBy().getId(), trackerTasks.getOpenedBy().getId());
		Assert.assertEquals(copy.getOperatingSystem().getId(), trackerTasks.getOperatingSystem().getId());
		Assert.assertEquals(copy.getPercentComplete(), trackerTasks.getPercentComplete());
		Assert.assertEquals(copy.getProductCategory().getId(), trackerTasks.getProductCategory().getId());
		Assert.assertEquals(copy.getProductVersion().getId(), trackerTasks.getProductVersion().getId());
		Assert.assertEquals(copy.getProject().getId(), trackerTasks.getProject().getId());
		Assert.assertEquals(copy.getResolutionReason().getId(), trackerTasks.getResolutionReason().getId());
		Assert.assertEquals(copy.getTaskPriority(), trackerTasks.getTaskPriority());
		Assert.assertEquals(copy.getTaskSeverity(), trackerTasks.getTaskSeverity());
		Assert.assertEquals(copy.getTaskToken(), trackerTasks.getTaskToken());
		Assert.assertEquals(copy.getTaskType().getId(), trackerTasks.getTaskType().getId());
		Assert.assertEquals(copy.getVersion(), trackerTasks.getVersion());
		// tests for coverage completeness
		Assert.assertFalse(trackerTasks.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(trackerTasks.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: tracker.tracker_users.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testTrackerUsers() throws CloneNotSupportedException {

	 	DataLayerTracker dataLayerTracker = DataLayerTrackerImpl.getInstance();
		TrackerUsers trackerUsers = TrackerDataPoolFactory.getTrackerUsers();
		dataLayerTracker.saveOrUpdate(trackerUsers);

		Integer trackerUsersId = trackerUsers.getId();
		TrackerUsers copy = trackerUsers.clone();
		dataLayerTracker.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTracker.evict(trackerUsers); 		 

		trackerUsers = dataLayerTracker.getTrackerUsers(trackerUsersId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getAccountEnabled(), trackerUsers.getAccountEnabled());
		Assert.assertEquals(copy.getDateformat(), trackerUsers.getDateformat());
		Assert.assertEquals(copy.getDateformatExtended(), trackerUsers.getDateformatExtended());
		Assert.assertEquals(copy.getEmailAddress(), trackerUsers.getEmailAddress());
		Assert.assertEquals(copy.getJabberId(), trackerUsers.getJabberId());
		Assert.assertEquals(copy.getLockUntil(), trackerUsers.getLockUntil());
		Assert.assertEquals(copy.getLoginAttempts(), trackerUsers.getLoginAttempts());
		Assert.assertEquals(copy.getMagicUrl(), trackerUsers.getMagicUrl());
		Assert.assertEquals(copy.getNotifyOwn(), trackerUsers.getNotifyOwn());
		Assert.assertEquals(copy.getNotifyType(), trackerUsers.getNotifyType());
		Assert.assertEquals(copy.getRealName(), trackerUsers.getRealName());
		Assert.assertEquals(copy.getRegisterDate(), trackerUsers.getRegisterDate());
		Assert.assertEquals(copy.getTasksPerpage(), trackerUsers.getTasksPerpage());
		Assert.assertEquals(copy.getTimeZone(), trackerUsers.getTimeZone());
		Assert.assertEquals(copy.getUserName(), trackerUsers.getUserName());
		Assert.assertEquals(copy.getUserPass(), trackerUsers.getUserPass());
		Assert.assertEquals(copy.getVersion(), trackerUsers.getVersion());
		// tests for coverage completeness
		Assert.assertFalse(trackerUsers.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(trackerUsers.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: tracker.tracker_users_in_groups.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testTrackerUsersInGroups() throws CloneNotSupportedException {

	 	DataLayerTracker dataLayerTracker = DataLayerTrackerImpl.getInstance();
		TrackerUsersInGroups trackerUsersInGroups = TrackerDataPoolFactory.getTrackerUsersInGroups();
		dataLayerTracker.saveOrUpdate(trackerUsersInGroups);

		Integer trackerUsersInGroupsId = trackerUsersInGroups.getId();
		TrackerUsersInGroups copy = trackerUsersInGroups.clone();
		dataLayerTracker.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTracker.evict(trackerUsersInGroups); 		 

		trackerUsersInGroups = dataLayerTracker.getTrackerUsersInGroups(trackerUsersInGroupsId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getGroup().getId(), trackerUsersInGroups.getGroup().getId());
		Assert.assertEquals(copy.getUser().getId(), trackerUsersInGroups.getUser().getId());
		Assert.assertEquals(copy.getVersion(), trackerUsersInGroups.getVersion());
		// tests for coverage completeness
		Assert.assertFalse(trackerUsersInGroups.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(trackerUsersInGroups.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: tracker.tracker_votes.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testTrackerVotes() throws CloneNotSupportedException {

	 	DataLayerTracker dataLayerTracker = DataLayerTrackerImpl.getInstance();
		TrackerVotes trackerVotes = TrackerDataPoolFactory.getTrackerVotes();
		dataLayerTracker.saveOrUpdate(trackerVotes);

		Integer trackerVotesId = trackerVotes.getId();
		TrackerVotes copy = trackerVotes.clone();
		dataLayerTracker.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerTracker.evict(trackerVotes); 		 

		trackerVotes = dataLayerTracker.getTrackerVotes(trackerVotesId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getDateTime(), trackerVotes.getDateTime());
		Assert.assertEquals(copy.getTask().getId(), trackerVotes.getTask().getId());
		Assert.assertEquals(copy.getUser().getId(), trackerVotes.getUser().getId());
		Assert.assertEquals(copy.getVersion(), trackerVotes.getVersion());
		// tests for coverage completeness
		Assert.assertFalse(trackerVotes.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(trackerVotes.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}

	/**
	 * Clears the database.
	 */
	@Test
	@Transactional
	public void testPostCleanDBFirstPass() {
		// We'll ignore any exceptions in this pass to give time for the custom exec to execute too 
		// (+ clear out any DB loops)
	
		try{HibernateTrackerDaoFactory.getTrackerAttachmentsDao().getQuery("delete from TrackerAttachments").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerRemindersDao().getQuery("delete from TrackerReminders").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerRelatedDao().getQuery("delete from TrackerRelated").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerNotificationsDao().getQuery("delete from TrackerNotifications").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerHistoryDao().getQuery("delete from TrackerHistory").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerDependenciesDao().getQuery("delete from TrackerDependencies").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerCommentsDao().getQuery("delete from TrackerComments").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerCacheDao().getQuery("delete from TrackerCache").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerAssignedDao().getQuery("delete from TrackerAssigned").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerAdminRequestsDao().getQuery("delete from TrackerAdminRequests").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerVotesDao().getQuery("delete from TrackerVotes").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerUsersInGroupsDao().getQuery("delete from TrackerUsersInGroups").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerTasksDao().getQuery("delete from TrackerTasks").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerListVersionDao().getQuery("delete from TrackerListVersion").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerListTasktypeDao().getQuery("delete from TrackerListTasktype").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerListStatusDao().getQuery("delete from TrackerListStatus").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerListResolutionDao().getQuery("delete from TrackerListResolution").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerListOsDao().getQuery("delete from TrackerListOs").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerListCategoryDao().getQuery("delete from TrackerListCategory").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerGroupsDao().getQuery("delete from TrackerGroups").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerSearchesDao().getQuery("delete from TrackerSearches").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerProjectsDao().getQuery("delete from TrackerProjects").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerUsersDao().getQuery("delete from TrackerUsers").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerRegistrationsDao().getQuery("delete from TrackerRegistrations").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerPrefsDao().getQuery("delete from TrackerPrefs").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerNotificationRecipientsDao().getQuery("delete from TrackerNotificationRecipients").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerNotificationMessagesDao().getQuery("delete from TrackerNotificationMessages").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateTrackerDaoFactory.getTrackerCityDao().getQuery("delete from TrackerCity").executeUpdate(); } catch (Exception e) { /* do nothing */ }


		
	}

	/**
	 * Clears the database.
	 */
	@Test
	@Transactional
	public void postCleanDBFinalPass() {
	
		HibernateTrackerDaoFactory.getTrackerAttachmentsDao().getQuery("delete from TrackerAttachments").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerRemindersDao().getQuery("delete from TrackerReminders").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerRelatedDao().getQuery("delete from TrackerRelated").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerNotificationsDao().getQuery("delete from TrackerNotifications").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerHistoryDao().getQuery("delete from TrackerHistory").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerDependenciesDao().getQuery("delete from TrackerDependencies").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerCommentsDao().getQuery("delete from TrackerComments").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerCacheDao().getQuery("delete from TrackerCache").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerAssignedDao().getQuery("delete from TrackerAssigned").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerAdminRequestsDao().getQuery("delete from TrackerAdminRequests").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerVotesDao().getQuery("delete from TrackerVotes").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerUsersInGroupsDao().getQuery("delete from TrackerUsersInGroups").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerTasksDao().getQuery("delete from TrackerTasks").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerListVersionDao().getQuery("delete from TrackerListVersion").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerListTasktypeDao().getQuery("delete from TrackerListTasktype").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerListStatusDao().getQuery("delete from TrackerListStatus").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerListResolutionDao().getQuery("delete from TrackerListResolution").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerListOsDao().getQuery("delete from TrackerListOs").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerListCategoryDao().getQuery("delete from TrackerListCategory").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerGroupsDao().getQuery("delete from TrackerGroups").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerSearchesDao().getQuery("delete from TrackerSearches").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerProjectsDao().getQuery("delete from TrackerProjects").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerUsersDao().getQuery("delete from TrackerUsers").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerRegistrationsDao().getQuery("delete from TrackerRegistrations").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerPrefsDao().getQuery("delete from TrackerPrefs").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerNotificationRecipientsDao().getQuery("delete from TrackerNotificationRecipients").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerNotificationMessagesDao().getQuery("delete from TrackerNotificationMessages").executeUpdate();
		HibernateTrackerDaoFactory.getTrackerCityDao().getQuery("delete from TrackerCity").executeUpdate();


		
	}

}

