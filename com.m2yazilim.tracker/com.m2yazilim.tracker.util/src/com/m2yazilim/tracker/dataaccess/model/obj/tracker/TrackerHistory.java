package com.m2yazilim.tracker.dataaccess.model.obj.tracker;

import com.felees.hbnpojogen.persistence.IPojoGenEntity;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.iface.ITrackerHistory;
import java.io.Serializable;
import java.util.Collections;
import java.util.Map;
import java.util.WeakHashMap;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.proxy.HibernateProxy;


/** 
 * Object mapping for hibernate-handled table: tracker_history.
 * @author autogenerated
 */

@Entity
@Table(name = "tracker_history", catalog = "tracker")
public class TrackerHistory implements Cloneable, Serializable, IPojoGenEntity, ITrackerHistory {

	/** Serial Version UID. */
	private static final long serialVersionUID = -558981852L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Integer> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, Integer>());
	
	/** hashCode temporary storage. */
	private volatile Integer hashCode;
	

	/** Field mapping. */
	private Integer eventDate;
	/** Field mapping. */
	private Integer eventType;
	/** Field mapping. */
	private String fieldChanged;
	/** Field mapping. */
	private Integer id = 0; // init for hibernate bug workaround
	/** Field mapping. */
	private String newValue;
	/** Field mapping. */
	private String oldValue;
	/** Field mapping. */
	private TrackerTasks task;
	/** Field mapping. */
	private TrackerUsers user;
	/** Field mapping. */
	private Integer version;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public TrackerHistory() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public TrackerHistory(Integer id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param eventDate Integer object;
	 * @param eventType Integer object;
	 * @param fieldChanged String object;
	 * @param id Integer object;
	 * @param task TrackerTasks object;
	 * @param user TrackerUsers object;
	 * @param version Integer object;
	 */
	public TrackerHistory(Integer eventDate, Integer eventType, String fieldChanged, 					
			Integer id, TrackerTasks task, TrackerUsers user, 					
			Integer version) {

		this.eventDate = eventDate;
		this.eventType = eventType;
		this.fieldChanged = fieldChanged;
		this.id = id;
		this.task = task;
		this.user = user;
		this.version = version;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return TrackerHistory.class;
	}
 

    /**
     * Return the value associated with the column: eventDate.
	 * @return A Integer object (this.eventDate)
	 */
	@Basic( optional = false )
	@Column( name = "event_date", nullable = false  )
	public Integer getEventDate() {
		return this.eventDate;
		
	}
	

  
    /**  
     * Set the value related to the column: eventDate.
	 * @param eventDate the eventDate value you wish to set
	 */
	public void setEventDate(final Integer eventDate) {
		this.eventDate = eventDate;
	}

    /**
     * Return the value associated with the column: eventType.
	 * @return A Integer object (this.eventType)
	 */
	@Basic( optional = false )
	@Column( name = "event_type", nullable = false  )
	public Integer getEventType() {
		return this.eventType;
		
	}
	

  
    /**  
     * Set the value related to the column: eventType.
	 * @param eventType the eventType value you wish to set
	 */
	public void setEventType(final Integer eventType) {
		this.eventType = eventType;
	}

    /**
     * Return the value associated with the column: fieldChanged.
	 * @return A String object (this.fieldChanged)
	 */
	@Basic( optional = false )
	@Column( name = "field_changed", nullable = false, length = 50  )
	public String getFieldChanged() {
		return this.fieldChanged;
		
	}
	

  
    /**  
     * Set the value related to the column: fieldChanged.
	 * @param fieldChanged the fieldChanged value you wish to set
	 */
	public void setFieldChanged(final String fieldChanged) {
		this.fieldChanged = fieldChanged;
	}

    /**
     * Return the value associated with the column: id.
	 * @return A Integer object (this.id)
	 */
    @Id 
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Basic( optional = false )
	@Column( name = "history_id", nullable = false  )
	public Integer getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Integer id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null || this.id == 0) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: newValue.
	 * @return A String object (this.newValue)
	 */
	@Basic( optional = true )
	@Column( name = "new_value", length = 21845  )
	public String getNewValue() {
		return this.newValue;
		
	}
	

  
    /**  
     * Set the value related to the column: newValue.
	 * @param newValue the newValue value you wish to set
	 */
	public void setNewValue(final String newValue) {
		this.newValue = newValue;
	}

    /**
     * Return the value associated with the column: oldValue.
	 * @return A String object (this.oldValue)
	 */
	@Basic( optional = true )
	@Column( name = "old_value", length = 21845  )
	public String getOldValue() {
		return this.oldValue;
		
	}
	

  
    /**  
     * Set the value related to the column: oldValue.
	 * @param oldValue the oldValue value you wish to set
	 */
	public void setOldValue(final String oldValue) {
		this.oldValue = oldValue;
	}

    /**
     * Return the value associated with the column: task.
	 * @return A TrackerTasks object (this.task)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@JoinColumn(name = "task_id", nullable = false )
	public TrackerTasks getTask() {
		return this.task;
		
	}
	

  
    /**  
     * Set the value related to the column: task.
	 * @param task the task value you wish to set
	 */
	public void setTask(final TrackerTasks task) {
		this.task = task;
	}

    /**
     * Return the value associated with the column: user.
	 * @return A TrackerUsers object (this.user)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@JoinColumn(name = "user_id", nullable = false )
	public TrackerUsers getUser() {
		return this.user;
		
	}
	

  
    /**  
     * Set the value related to the column: user.
	 * @param user the user value you wish to set
	 */
	public void setUser(final TrackerUsers user) {
		this.user = user;
	}

    /**
     * Return the value associated with the column: version.
	 * @return A Integer object (this.version)
	 */
	@Basic( optional = false )
	@Column( nullable = false  )
	public Integer getVersion() {
		return this.version;
		
	}
	

  
    /**  
     * Set the value related to the column: version.
	 * @param version the version value you wish to set
	 */
	public void setVersion(final Integer version) {
		this.version = version;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public TrackerHistory clone() throws CloneNotSupportedException {
		
        final TrackerHistory copy = (TrackerHistory)super.clone();

		copy.setEventDate(this.getEventDate());
		copy.setEventType(this.getEventType());
		copy.setFieldChanged(this.getFieldChanged());
		copy.setId(this.getId());
		copy.setNewValue(this.getNewValue());
		copy.setOldValue(this.getOldValue());
		copy.setTask(this.getTask());
		copy.setUser(this.getUser());
		copy.setVersion(this.getVersion());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("eventDate: " + this.getEventDate() + ", ");
		sb.append("eventType: " + this.getEventType() + ", ");
		sb.append("fieldChanged: " + this.getFieldChanged() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("newValue: " + this.getNewValue() + ", ");
		sb.append("oldValue: " + this.getOldValue() + ", ");
		sb.append("version: " + this.getVersion());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final TrackerHistory that; 
		try {
			that = (TrackerHistory) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getEventDate() == null) && (that.getEventDate() == null)) || (getEventDate() != null && getEventDate().equals(that.getEventDate())));
		result = result && (((getEventType() == null) && (that.getEventType() == null)) || (getEventType() != null && getEventType().equals(that.getEventType())));
		result = result && (((getFieldChanged() == null) && (that.getFieldChanged() == null)) || (getFieldChanged() != null && getFieldChanged().equals(that.getFieldChanged())));
		result = result && (((getNewValue() == null) && (that.getNewValue() == null)) || (getNewValue() != null && getNewValue().equals(that.getNewValue())));
		result = result && (((getOldValue() == null) && (that.getOldValue() == null)) || (getOldValue() != null && getOldValue().equals(that.getOldValue())));
		result = result && (((getTask() == null) && (that.getTask() == null)) || (getTask() != null && getTask().getId().equals(that.getTask().getId())));	
		result = result && (((getUser() == null) && (that.getUser() == null)) || (getUser() != null && getUser().getId().equals(that.getUser().getId())));	
		result = result && (((getVersion() == null) && (that.getVersion() == null)) || (getVersion() != null && getVersion().equals(that.getVersion())));
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					Integer newHashCode = null;

					if ( getId() != null ) {
					newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null && getId() != 0) {
							newHashCode = getId();
						} else {

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode;
	}
	

	
}
