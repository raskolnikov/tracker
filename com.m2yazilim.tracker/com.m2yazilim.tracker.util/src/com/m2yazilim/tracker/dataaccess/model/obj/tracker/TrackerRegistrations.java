package com.m2yazilim.tracker.dataaccess.model.obj.tracker;

import com.felees.hbnpojogen.persistence.IPojoGenEntity;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.iface.ITrackerRegistrations;
import java.io.Serializable;
import java.util.Collections;
import java.util.Map;
import java.util.WeakHashMap;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.proxy.HibernateProxy;


/** 
 * Object mapping for hibernate-handled table: tracker_registrations.
 * @author autogenerated
 */

@Entity
@Table(name = "tracker_registrations", catalog = "tracker")
public class TrackerRegistrations implements Cloneable, Serializable, IPojoGenEntity, ITrackerRegistrations {

	/** Serial Version UID. */
	private static final long serialVersionUID = -558981840L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Integer> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, Integer>());
	
	/** hashCode temporary storage. */
	private volatile Integer hashCode;
	

	/** Field mapping. */
	private String confirmCode;
	/** Field mapping. */
	private String emailAddress;
	/** Field mapping. */
	private Integer id = 0; // init for hibernate bug workaround
	/** Field mapping. */
	private String jabberId;
	/** Field mapping. */
	private String magicUrl;
	/** Field mapping. */
	private Integer notifyType;
	/** Field mapping. */
	private String realName;
	/** Field mapping. */
	private Integer regTime;
	/** Field mapping. */
	private Integer timeZone;
	/** Field mapping. */
	private String userName;
	/** Field mapping. */
	private Integer version;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public TrackerRegistrations() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public TrackerRegistrations(Integer id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param confirmCode String object;
	 * @param emailAddress String object;
	 * @param id Integer object;
	 * @param jabberId String object;
	 * @param magicUrl String object;
	 * @param notifyType Integer object;
	 * @param realName String object;
	 * @param regTime Integer object;
	 * @param timeZone Integer object;
	 * @param userName String object;
	 * @param version Integer object;
	 */
	public TrackerRegistrations(String confirmCode, String emailAddress, Integer id, 					
			String jabberId, String magicUrl, Integer notifyType, 					
			String realName, Integer regTime, Integer timeZone, 					
			String userName, Integer version) {

		this.confirmCode = confirmCode;
		this.emailAddress = emailAddress;
		this.id = id;
		this.jabberId = jabberId;
		this.magicUrl = magicUrl;
		this.notifyType = notifyType;
		this.realName = realName;
		this.regTime = regTime;
		this.timeZone = timeZone;
		this.userName = userName;
		this.version = version;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return TrackerRegistrations.class;
	}
 

    /**
     * Return the value associated with the column: confirmCode.
	 * @return A String object (this.confirmCode)
	 */
	@Basic( optional = false )
	@Column( name = "confirm_code", nullable = false, length = 20  )
	public String getConfirmCode() {
		return this.confirmCode;
		
	}
	

  
    /**  
     * Set the value related to the column: confirmCode.
	 * @param confirmCode the confirmCode value you wish to set
	 */
	public void setConfirmCode(final String confirmCode) {
		this.confirmCode = confirmCode;
	}

    /**
     * Return the value associated with the column: emailAddress.
	 * @return A String object (this.emailAddress)
	 */
	@Basic( optional = false )
	@Column( name = "email_address", nullable = false, length = 100  )
	public String getEmailAddress() {
		return this.emailAddress;
		
	}
	

  
    /**  
     * Set the value related to the column: emailAddress.
	 * @param emailAddress the emailAddress value you wish to set
	 */
	public void setEmailAddress(final String emailAddress) {
		this.emailAddress = emailAddress;
	}

    /**
     * Return the value associated with the column: id.
	 * @return A Integer object (this.id)
	 */
    @Id 
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Basic( optional = false )
	@Column( name = "reg_id", nullable = false  )
	public Integer getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Integer id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null || this.id == 0) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: jabberId.
	 * @return A String object (this.jabberId)
	 */
	@Basic( optional = false )
	@Column( name = "jabber_id", nullable = false, length = 100  )
	public String getJabberId() {
		return this.jabberId;
		
	}
	

  
    /**  
     * Set the value related to the column: jabberId.
	 * @param jabberId the jabberId value you wish to set
	 */
	public void setJabberId(final String jabberId) {
		this.jabberId = jabberId;
	}

    /**
     * Return the value associated with the column: magicUrl.
	 * @return A String object (this.magicUrl)
	 */
	@Basic( optional = false )
	@Column( name = "magic_url", nullable = false, length = 40  )
	public String getMagicUrl() {
		return this.magicUrl;
		
	}
	

  
    /**  
     * Set the value related to the column: magicUrl.
	 * @param magicUrl the magicUrl value you wish to set
	 */
	public void setMagicUrl(final String magicUrl) {
		this.magicUrl = magicUrl;
	}

    /**
     * Return the value associated with the column: notifyType.
	 * @return A Integer object (this.notifyType)
	 */
	@Basic( optional = false )
	@Column( name = "notify_type", nullable = false  )
	public Integer getNotifyType() {
		return this.notifyType;
		
	}
	

  
    /**  
     * Set the value related to the column: notifyType.
	 * @param notifyType the notifyType value you wish to set
	 */
	public void setNotifyType(final Integer notifyType) {
		this.notifyType = notifyType;
	}

    /**
     * Return the value associated with the column: realName.
	 * @return A String object (this.realName)
	 */
	@Basic( optional = false )
	@Column( name = "real_name", nullable = false, length = 100  )
	public String getRealName() {
		return this.realName;
		
	}
	

  
    /**  
     * Set the value related to the column: realName.
	 * @param realName the realName value you wish to set
	 */
	public void setRealName(final String realName) {
		this.realName = realName;
	}

    /**
     * Return the value associated with the column: regTime.
	 * @return A Integer object (this.regTime)
	 */
	@Basic( optional = false )
	@Column( name = "reg_time", nullable = false  )
	public Integer getRegTime() {
		return this.regTime;
		
	}
	

  
    /**  
     * Set the value related to the column: regTime.
	 * @param regTime the regTime value you wish to set
	 */
	public void setRegTime(final Integer regTime) {
		this.regTime = regTime;
	}

    /**
     * Return the value associated with the column: timeZone.
	 * @return A Integer object (this.timeZone)
	 */
	@Basic( optional = false )
	@Column( name = "time_zone", nullable = false  )
	public Integer getTimeZone() {
		return this.timeZone;
		
	}
	

  
    /**  
     * Set the value related to the column: timeZone.
	 * @param timeZone the timeZone value you wish to set
	 */
	public void setTimeZone(final Integer timeZone) {
		this.timeZone = timeZone;
	}

    /**
     * Return the value associated with the column: userName.
	 * @return A String object (this.userName)
	 */
	@Basic( optional = false )
	@Column( name = "user_name", nullable = false, length = 32  )
	public String getUserName() {
		return this.userName;
		
	}
	

  
    /**  
     * Set the value related to the column: userName.
	 * @param userName the userName value you wish to set
	 */
	public void setUserName(final String userName) {
		this.userName = userName;
	}

    /**
     * Return the value associated with the column: version.
	 * @return A Integer object (this.version)
	 */
	@Basic( optional = false )
	@Column( nullable = false  )
	public Integer getVersion() {
		return this.version;
		
	}
	

  
    /**  
     * Set the value related to the column: version.
	 * @param version the version value you wish to set
	 */
	public void setVersion(final Integer version) {
		this.version = version;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public TrackerRegistrations clone() throws CloneNotSupportedException {
		
        final TrackerRegistrations copy = (TrackerRegistrations)super.clone();

		copy.setConfirmCode(this.getConfirmCode());
		copy.setEmailAddress(this.getEmailAddress());
		copy.setId(this.getId());
		copy.setJabberId(this.getJabberId());
		copy.setMagicUrl(this.getMagicUrl());
		copy.setNotifyType(this.getNotifyType());
		copy.setRealName(this.getRealName());
		copy.setRegTime(this.getRegTime());
		copy.setTimeZone(this.getTimeZone());
		copy.setUserName(this.getUserName());
		copy.setVersion(this.getVersion());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("confirmCode: " + this.getConfirmCode() + ", ");
		sb.append("emailAddress: " + this.getEmailAddress() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("jabberId: " + this.getJabberId() + ", ");
		sb.append("magicUrl: " + this.getMagicUrl() + ", ");
		sb.append("notifyType: " + this.getNotifyType() + ", ");
		sb.append("realName: " + this.getRealName() + ", ");
		sb.append("regTime: " + this.getRegTime() + ", ");
		sb.append("timeZone: " + this.getTimeZone() + ", ");
		sb.append("userName: " + this.getUserName() + ", ");
		sb.append("version: " + this.getVersion());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final TrackerRegistrations that; 
		try {
			that = (TrackerRegistrations) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getConfirmCode() == null) && (that.getConfirmCode() == null)) || (getConfirmCode() != null && getConfirmCode().equals(that.getConfirmCode())));
		result = result && (((getEmailAddress() == null) && (that.getEmailAddress() == null)) || (getEmailAddress() != null && getEmailAddress().equals(that.getEmailAddress())));
		result = result && (((getJabberId() == null) && (that.getJabberId() == null)) || (getJabberId() != null && getJabberId().equals(that.getJabberId())));
		result = result && (((getMagicUrl() == null) && (that.getMagicUrl() == null)) || (getMagicUrl() != null && getMagicUrl().equals(that.getMagicUrl())));
		result = result && (((getNotifyType() == null) && (that.getNotifyType() == null)) || (getNotifyType() != null && getNotifyType().equals(that.getNotifyType())));
		result = result && (((getRealName() == null) && (that.getRealName() == null)) || (getRealName() != null && getRealName().equals(that.getRealName())));
		result = result && (((getRegTime() == null) && (that.getRegTime() == null)) || (getRegTime() != null && getRegTime().equals(that.getRegTime())));
		result = result && (((getTimeZone() == null) && (that.getTimeZone() == null)) || (getTimeZone() != null && getTimeZone().equals(that.getTimeZone())));
		result = result && (((getUserName() == null) && (that.getUserName() == null)) || (getUserName() != null && getUserName().equals(that.getUserName())));
		result = result && (((getVersion() == null) && (that.getVersion() == null)) || (getVersion() != null && getVersion().equals(that.getVersion())));
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					Integer newHashCode = null;

					if ( getId() != null ) {
					newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null && getId() != 0) {
							newHashCode = getId();
						} else {

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode;
	}
	

	
}
