package com.m2yazilim.tracker.dataaccess.model.obj.tracker;

import com.felees.hbnpojogen.persistence.IPojoGenEntity;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.TrackerTasks;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.iface.ITrackerListVersion;
import java.io.Serializable;
import java.util.Collections;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.proxy.HibernateProxy;


/** 
 * Object mapping for hibernate-handled table: tracker_list_version.
 * @author autogenerated
 */

@Entity
@Table(name = "tracker_list_version", catalog = "tracker")
public class TrackerListVersion implements Cloneable, Serializable, IPojoGenEntity, ITrackerListVersion {

	/** Serial Version UID. */
	private static final long serialVersionUID = -558981846L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Integer> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, Integer>());
	
	/** hashCode temporary storage. */
	private volatile Integer hashCode;
	

	/** Field mapping. */
	private Integer id = 0; // init for hibernate bug workaround
	/** Field mapping. */
	private Integer listPosition;
	/** Field mapping. */
	private TrackerProjects project;
	/** Field mapping. */
	private Integer showInList;
	/** Field mapping. */
	private Set<TrackerTasks> trackerTaskss = new HashSet<TrackerTasks>();

	/** Field mapping. */
	private Integer version;
	/** Field mapping. */
	private String versionName;
	/** Field mapping. */
	private Integer versionTense;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public TrackerListVersion() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public TrackerListVersion(Integer id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param id Integer object;
	 * @param listPosition Integer object;
	 * @param project TrackerProjects object;
	 * @param showInList Integer object;
	 * @param version Integer object;
	 * @param versionName String object;
	 * @param versionTense Integer object;
	 */
	public TrackerListVersion(Integer id, Integer listPosition, TrackerProjects project, 					
			Integer showInList, Integer version, String versionName, 					
			Integer versionTense) {

		this.id = id;
		this.listPosition = listPosition;
		this.project = project;
		this.showInList = showInList;
		this.version = version;
		this.versionName = versionName;
		this.versionTense = versionTense;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return TrackerListVersion.class;
	}
 

    /**
     * Return the value associated with the column: id.
	 * @return A Integer object (this.id)
	 */
    @Id 
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Basic( optional = false )
	@Column( name = "version_id", nullable = false  )
	public Integer getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Integer id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null || this.id == 0) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: listPosition.
	 * @return A Integer object (this.listPosition)
	 */
	@Basic( optional = false )
	@Column( name = "list_position", nullable = false  )
	public Integer getListPosition() {
		return this.listPosition;
		
	}
	

  
    /**  
     * Set the value related to the column: listPosition.
	 * @param listPosition the listPosition value you wish to set
	 */
	public void setListPosition(final Integer listPosition) {
		this.listPosition = listPosition;
	}

    /**
     * Return the value associated with the column: project.
	 * @return A TrackerProjects object (this.project)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@JoinColumn(name = "project_id", nullable = false )
	public TrackerProjects getProject() {
		return this.project;
		
	}
	

  
    /**  
     * Set the value related to the column: project.
	 * @param project the project value you wish to set
	 */
	public void setProject(final TrackerProjects project) {
		this.project = project;
	}

    /**
     * Return the value associated with the column: showInList.
	 * @return A Integer object (this.showInList)
	 */
	@Basic( optional = false )
	@Column( name = "show_in_list", nullable = false  )
	public Integer getShowInList() {
		return this.showInList;
		
	}
	

  
    /**  
     * Set the value related to the column: showInList.
	 * @param showInList the showInList value you wish to set
	 */
	public void setShowInList(final Integer showInList) {
		this.showInList = showInList;
	}

    /**
     * Return the value associated with the column: trackerTasks.
	 * @return A Set&lt;TrackerTasks&gt; object (this.trackerTasks)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "productVersion"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "version_id", nullable = false  )
	public Set<TrackerTasks> getTrackerTaskss() {
		return this.trackerTaskss;
		
	}
	
	/**
	 * Adds a bi-directional link of type TrackerTasks to the trackerTaskss set.
	 * @param trackerTasks item to add
	 */
	public void addTrackerTasks(TrackerTasks trackerTasks) {
		trackerTasks.setProductVersion(this);
		this.trackerTaskss.add(trackerTasks);
	}

  
    /**  
     * Set the value related to the column: trackerTasks.
	 * @param trackerTasks the trackerTasks value you wish to set
	 */
	public void setTrackerTaskss(final Set<TrackerTasks> trackerTasks) {
		this.trackerTaskss = trackerTasks;
	}

    /**
     * Return the value associated with the column: version.
	 * @return A Integer object (this.version)
	 */
	@Basic( optional = false )
	@Column( nullable = false  )
	public Integer getVersion() {
		return this.version;
		
	}
	

  
    /**  
     * Set the value related to the column: version.
	 * @param version the version value you wish to set
	 */
	public void setVersion(final Integer version) {
		this.version = version;
	}

    /**
     * Return the value associated with the column: versionName.
	 * @return A String object (this.versionName)
	 */
	@Basic( optional = false )
	@Column( name = "version_name", nullable = false, length = 40  )
	public String getVersionName() {
		return this.versionName;
		
	}
	

  
    /**  
     * Set the value related to the column: versionName.
	 * @param versionName the versionName value you wish to set
	 */
	public void setVersionName(final String versionName) {
		this.versionName = versionName;
	}

    /**
     * Return the value associated with the column: versionTense.
	 * @return A Integer object (this.versionTense)
	 */
	@Basic( optional = false )
	@Column( name = "version_tense", nullable = false  )
	public Integer getVersionTense() {
		return this.versionTense;
		
	}
	

  
    /**  
     * Set the value related to the column: versionTense.
	 * @param versionTense the versionTense value you wish to set
	 */
	public void setVersionTense(final Integer versionTense) {
		this.versionTense = versionTense;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public TrackerListVersion clone() throws CloneNotSupportedException {
		
        final TrackerListVersion copy = (TrackerListVersion)super.clone();

		copy.setId(this.getId());
		copy.setListPosition(this.getListPosition());
		copy.setProject(this.getProject());
		copy.setShowInList(this.getShowInList());
		if (this.getTrackerTaskss() != null) {
			copy.getTrackerTaskss().addAll(this.getTrackerTaskss());
		}
		copy.setVersion(this.getVersion());
		copy.setVersionName(this.getVersionName());
		copy.setVersionTense(this.getVersionTense());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("id: " + this.getId() + ", ");
		sb.append("listPosition: " + this.getListPosition() + ", ");
		sb.append("showInList: " + this.getShowInList() + ", ");
		sb.append("version: " + this.getVersion() + ", ");
		sb.append("versionName: " + this.getVersionName() + ", ");
		sb.append("versionTense: " + this.getVersionTense());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final TrackerListVersion that; 
		try {
			that = (TrackerListVersion) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getListPosition() == null) && (that.getListPosition() == null)) || (getListPosition() != null && getListPosition().equals(that.getListPosition())));
		result = result && (((getProject() == null) && (that.getProject() == null)) || (getProject() != null && getProject().getId().equals(that.getProject().getId())));	
		result = result && (((getShowInList() == null) && (that.getShowInList() == null)) || (getShowInList() != null && getShowInList().equals(that.getShowInList())));
		result = result && (((getVersion() == null) && (that.getVersion() == null)) || (getVersion() != null && getVersion().equals(that.getVersion())));
		result = result && (((getVersionName() == null) && (that.getVersionName() == null)) || (getVersionName() != null && getVersionName().equals(that.getVersionName())));
		result = result && (((getVersionTense() == null) && (that.getVersionTense() == null)) || (getVersionTense() != null && getVersionTense().equals(that.getVersionTense())));
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					Integer newHashCode = null;

					if ( getId() != null ) {
					newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null && getId() != 0) {
							newHashCode = getId();
						} else {

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode;
	}
	

	
}
