package com.m2yazilim.tracker.dataaccess.model.obj.tracker;

import com.felees.hbnpojogen.persistence.IPojoGenEntity;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.iface.ITrackerAttachments;
import java.io.Serializable;
import java.util.Collections;
import java.util.Map;
import java.util.WeakHashMap;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.proxy.HibernateProxy;


/** 
 * Object mapping for hibernate-handled table: tracker_attachments.
 * @author autogenerated
 */

@Entity
@Table(name = "tracker_attachments", catalog = "tracker")
public class TrackerAttachments implements Cloneable, Serializable, IPojoGenEntity, ITrackerAttachments {

	/** Serial Version UID. */
	private static final long serialVersionUID = -558981858L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Integer> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, Integer>());
	
	/** hashCode temporary storage. */
	private volatile Integer hashCode;
	

	/** Field mapping. */
	private TrackerUsers addedBy;
	/** Field mapping. */
	private TrackerComments comment;
	/** Field mapping. */
	private Integer dateAdded;
	/** Field mapping. */
	private String fileName;
	/** Field mapping. */
	private Integer fileSize;
	/** Field mapping. */
	private String fileType;
	/** Field mapping. */
	private Integer id = 0; // init for hibernate bug workaround
	/** Field mapping. */
	private String origName;
	/** Field mapping. */
	private TrackerTasks task;
	/** Field mapping. */
	private Integer version;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public TrackerAttachments() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public TrackerAttachments(Integer id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param addedBy TrackerUsers object;
	 * @param comment TrackerComments object;
	 * @param dateAdded Integer object;
	 * @param fileName String object;
	 * @param fileSize Integer object;
	 * @param fileType String object;
	 * @param id Integer object;
	 * @param origName String object;
	 * @param task TrackerTasks object;
	 * @param version Integer object;
	 */
	public TrackerAttachments(TrackerUsers addedBy, TrackerComments comment, Integer dateAdded, 					
			String fileName, Integer fileSize, String fileType, 					
			Integer id, String origName, TrackerTasks task, 					
			Integer version) {

		this.addedBy = addedBy;
		this.comment = comment;
		this.dateAdded = dateAdded;
		this.fileName = fileName;
		this.fileSize = fileSize;
		this.fileType = fileType;
		this.id = id;
		this.origName = origName;
		this.task = task;
		this.version = version;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return TrackerAttachments.class;
	}
 

    /**
     * Return the value associated with the column: addedBy.
	 * @return A TrackerUsers object (this.addedBy)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@JoinColumn(name = "added_by", nullable = false )
	public TrackerUsers getAddedBy() {
		return this.addedBy;
		
	}
	

  
    /**  
     * Set the value related to the column: addedBy.
	 * @param addedBy the addedBy value you wish to set
	 */
	public void setAddedBy(final TrackerUsers addedBy) {
		this.addedBy = addedBy;
	}

    /**
     * Return the value associated with the column: comment.
	 * @return A TrackerComments object (this.comment)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@JoinColumn(name = "comment_id", nullable = false )
	public TrackerComments getComment() {
		return this.comment;
		
	}
	

  
    /**  
     * Set the value related to the column: comment.
	 * @param comment the comment value you wish to set
	 */
	public void setComment(final TrackerComments comment) {
		this.comment = comment;
	}

    /**
     * Return the value associated with the column: dateAdded.
	 * @return A Integer object (this.dateAdded)
	 */
	@Basic( optional = false )
	@Column( name = "date_added", nullable = false  )
	public Integer getDateAdded() {
		return this.dateAdded;
		
	}
	

  
    /**  
     * Set the value related to the column: dateAdded.
	 * @param dateAdded the dateAdded value you wish to set
	 */
	public void setDateAdded(final Integer dateAdded) {
		this.dateAdded = dateAdded;
	}

    /**
     * Return the value associated with the column: fileName.
	 * @return A String object (this.fileName)
	 */
	@Basic( optional = false )
	@Column( name = "file_name", nullable = false, length = 30  )
	public String getFileName() {
		return this.fileName;
		
	}
	

  
    /**  
     * Set the value related to the column: fileName.
	 * @param fileName the fileName value you wish to set
	 */
	public void setFileName(final String fileName) {
		this.fileName = fileName;
	}

    /**
     * Return the value associated with the column: fileSize.
	 * @return A Integer object (this.fileSize)
	 */
	@Basic( optional = false )
	@Column( name = "file_size", nullable = false  )
	public Integer getFileSize() {
		return this.fileSize;
		
	}
	

  
    /**  
     * Set the value related to the column: fileSize.
	 * @param fileSize the fileSize value you wish to set
	 */
	public void setFileSize(final Integer fileSize) {
		this.fileSize = fileSize;
	}

    /**
     * Return the value associated with the column: fileType.
	 * @return A String object (this.fileType)
	 */
	@Basic( optional = false )
	@Column( name = "file_type", nullable = false, length = 255  )
	public String getFileType() {
		return this.fileType;
		
	}
	

  
    /**  
     * Set the value related to the column: fileType.
	 * @param fileType the fileType value you wish to set
	 */
	public void setFileType(final String fileType) {
		this.fileType = fileType;
	}

    /**
     * Return the value associated with the column: id.
	 * @return A Integer object (this.id)
	 */
    @Id 
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Basic( optional = false )
	@Column( name = "attachment_id", nullable = false  )
	public Integer getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Integer id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null || this.id == 0) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: origName.
	 * @return A String object (this.origName)
	 */
	@Basic( optional = false )
	@Column( name = "orig_name", nullable = false, length = 255  )
	public String getOrigName() {
		return this.origName;
		
	}
	

  
    /**  
     * Set the value related to the column: origName.
	 * @param origName the origName value you wish to set
	 */
	public void setOrigName(final String origName) {
		this.origName = origName;
	}

    /**
     * Return the value associated with the column: task.
	 * @return A TrackerTasks object (this.task)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@JoinColumn(name = "task_id", nullable = false )
	public TrackerTasks getTask() {
		return this.task;
		
	}
	

  
    /**  
     * Set the value related to the column: task.
	 * @param task the task value you wish to set
	 */
	public void setTask(final TrackerTasks task) {
		this.task = task;
	}

    /**
     * Return the value associated with the column: version.
	 * @return A Integer object (this.version)
	 */
	@Basic( optional = false )
	@Column( nullable = false  )
	public Integer getVersion() {
		return this.version;
		
	}
	

  
    /**  
     * Set the value related to the column: version.
	 * @param version the version value you wish to set
	 */
	public void setVersion(final Integer version) {
		this.version = version;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public TrackerAttachments clone() throws CloneNotSupportedException {
		
        final TrackerAttachments copy = (TrackerAttachments)super.clone();

		copy.setAddedBy(this.getAddedBy());
		copy.setComment(this.getComment());
		copy.setDateAdded(this.getDateAdded());
		copy.setFileName(this.getFileName());
		copy.setFileSize(this.getFileSize());
		copy.setFileType(this.getFileType());
		copy.setId(this.getId());
		copy.setOrigName(this.getOrigName());
		copy.setTask(this.getTask());
		copy.setVersion(this.getVersion());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("dateAdded: " + this.getDateAdded() + ", ");
		sb.append("fileName: " + this.getFileName() + ", ");
		sb.append("fileSize: " + this.getFileSize() + ", ");
		sb.append("fileType: " + this.getFileType() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("origName: " + this.getOrigName() + ", ");
		sb.append("version: " + this.getVersion());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final TrackerAttachments that; 
		try {
			that = (TrackerAttachments) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getAddedBy() == null) && (that.getAddedBy() == null)) || (getAddedBy() != null && getAddedBy().getId().equals(that.getAddedBy().getId())));	
		result = result && (((getComment() == null) && (that.getComment() == null)) || (getComment() != null && getComment().getId().equals(that.getComment().getId())));	
		result = result && (((getDateAdded() == null) && (that.getDateAdded() == null)) || (getDateAdded() != null && getDateAdded().equals(that.getDateAdded())));
		result = result && (((getFileName() == null) && (that.getFileName() == null)) || (getFileName() != null && getFileName().equals(that.getFileName())));
		result = result && (((getFileSize() == null) && (that.getFileSize() == null)) || (getFileSize() != null && getFileSize().equals(that.getFileSize())));
		result = result && (((getFileType() == null) && (that.getFileType() == null)) || (getFileType() != null && getFileType().equals(that.getFileType())));
		result = result && (((getOrigName() == null) && (that.getOrigName() == null)) || (getOrigName() != null && getOrigName().equals(that.getOrigName())));
		result = result && (((getTask() == null) && (that.getTask() == null)) || (getTask() != null && getTask().getId().equals(that.getTask().getId())));	
		result = result && (((getVersion() == null) && (that.getVersion() == null)) || (getVersion() != null && getVersion().equals(that.getVersion())));
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					Integer newHashCode = null;

					if ( getId() != null ) {
					newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null && getId() != 0) {
							newHashCode = getId();
						} else {

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode;
	}
	

	
}
