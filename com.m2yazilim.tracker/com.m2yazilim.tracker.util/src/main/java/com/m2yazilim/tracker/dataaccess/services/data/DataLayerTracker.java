package com.m2yazilim.tracker.dataaccess.services.data;

import com.m2yazilim.tracker.dataaccess.model.obj.tracker.TrackerAdminRequests;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.TrackerAssigned;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.TrackerAssignedOld;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.TrackerAttachments;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.TrackerCache;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.TrackerCity;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.TrackerComments;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.TrackerDependencies;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.TrackerGroups;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.TrackerHistory;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.TrackerListCategory;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.TrackerListOs;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.TrackerListResolution;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.TrackerListStatus;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.TrackerListTasktype;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.TrackerListVersion;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.TrackerLocationGetType;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.TrackerNotificationMessages;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.TrackerNotificationRecipients;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.TrackerNotifications;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.TrackerPrefs;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.TrackerProjects;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.TrackerRegistrations;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.TrackerRelated;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.TrackerReminders;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.TrackerSearches;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.TrackerTableChangeLog;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.TrackerTasks;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.TrackerUserLocationLog;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.TrackerUserMobileSetting;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.TrackerUsers;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.TrackerUserSession;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.TrackerUsersInGroups;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.TrackerVotes;
import java.io.Serializable;
import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.hibernate.ReplicationMode;
import org.hibernate.Session;
import java.util.Collection;
import com.felees.hbnpojogen.persistence.IPojoGenEntity;
/** 
 * Data layer.
 * @author autogenerated
 */
public interface DataLayerTracker {

    /**
     * Deletes the given object from disk.
     * @param <T> A DataLayerObject-derived type
     * @param persistentObject Object to delete
     */
    <T> void delete(T persistentObject);
    /**
     * Refresh the object $class.className from disk.
     * @param <T> A DataLayerObject-derived type
     * @param persistentObject Object to reload
     */
    <T> void refresh(T persistentObject);

    /**
     * Saves the given object to disk.
     * @param persistentObject Object to save
	 * @param <T> A DataLayerObject-derived type
     * @return Identifier of saved object 
     */
    <T> Serializable save(T persistentObject);
    /**
     * Saves or updates the given $class.className object to disk.
	 * @param <T> A DataLayerObject-derived type
     * @param persistentObject Object to save 
     */
    <T> void saveOrUpdate(T persistentObject);
    /**
     * Updates the given object to disk.
	 * @param <T> A DataLayerObject-derived type
     * @param persistentObject Object to update 
     */
    <T> void update(T persistentObject);


    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (TrackerAdminRequests obj) directly
     * @param id Identifier to delete
     */
    void deleteTrackerAdminRequests(final Integer id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a TrackerAdminRequests object
     */
    TrackerAdminRequests loadTrackerAdminRequests(final Integer id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     TrackerAdminRequests getTrackerAdminRequests(final Integer id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (TrackerAssigned obj) directly
     * @param id Identifier to delete
     */
    void deleteTrackerAssigned(final Integer id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a TrackerAssigned object
     */
    TrackerAssigned loadTrackerAssigned(final Integer id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     TrackerAssigned getTrackerAssigned(final Integer id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (TrackerAssignedOld obj) directly
     * @param id Identifier to delete
     */
    void deleteTrackerAssignedOld(final Integer id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a TrackerAssignedOld object
     */
    TrackerAssignedOld loadTrackerAssignedOld(final Integer id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     TrackerAssignedOld getTrackerAssignedOld(final Integer id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (TrackerAttachments obj) directly
     * @param id Identifier to delete
     */
    void deleteTrackerAttachments(final Integer id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a TrackerAttachments object
     */
    TrackerAttachments loadTrackerAttachments(final Integer id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     TrackerAttachments getTrackerAttachments(final Integer id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (TrackerCache obj) directly
     * @param id Identifier to delete
     */
    void deleteTrackerCache(final Integer id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a TrackerCache object
     */
    TrackerCache loadTrackerCache(final Integer id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     TrackerCache getTrackerCache(final Integer id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (TrackerCity obj) directly
     * @param id Identifier to delete
     */
    void deleteTrackerCity(final Integer id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a TrackerCity object
     */
    TrackerCity loadTrackerCity(final Integer id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     TrackerCity getTrackerCity(final Integer id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (TrackerComments obj) directly
     * @param id Identifier to delete
     */
    void deleteTrackerComments(final Integer id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a TrackerComments object
     */
    TrackerComments loadTrackerComments(final Integer id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     TrackerComments getTrackerComments(final Integer id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (TrackerDependencies obj) directly
     * @param id Identifier to delete
     */
    void deleteTrackerDependencies(final Integer id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a TrackerDependencies object
     */
    TrackerDependencies loadTrackerDependencies(final Integer id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     TrackerDependencies getTrackerDependencies(final Integer id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (TrackerGroups obj) directly
     * @param id Identifier to delete
     */
    void deleteTrackerGroups(final Integer id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a TrackerGroups object
     */
    TrackerGroups loadTrackerGroups(final Integer id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     TrackerGroups getTrackerGroups(final Integer id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (TrackerHistory obj) directly
     * @param id Identifier to delete
     */
    void deleteTrackerHistory(final Integer id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a TrackerHistory object
     */
    TrackerHistory loadTrackerHistory(final Integer id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     TrackerHistory getTrackerHistory(final Integer id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (TrackerListCategory obj) directly
     * @param id Identifier to delete
     */
    void deleteTrackerListCategory(final Integer id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a TrackerListCategory object
     */
    TrackerListCategory loadTrackerListCategory(final Integer id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     TrackerListCategory getTrackerListCategory(final Integer id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (TrackerListOs obj) directly
     * @param id Identifier to delete
     */
    void deleteTrackerListOs(final Integer id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a TrackerListOs object
     */
    TrackerListOs loadTrackerListOs(final Integer id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     TrackerListOs getTrackerListOs(final Integer id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (TrackerListResolution obj) directly
     * @param id Identifier to delete
     */
    void deleteTrackerListResolution(final Integer id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a TrackerListResolution object
     */
    TrackerListResolution loadTrackerListResolution(final Integer id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     TrackerListResolution getTrackerListResolution(final Integer id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (TrackerListStatus obj) directly
     * @param id Identifier to delete
     */
    void deleteTrackerListStatus(final Integer id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a TrackerListStatus object
     */
    TrackerListStatus loadTrackerListStatus(final Integer id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     TrackerListStatus getTrackerListStatus(final Integer id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (TrackerListTasktype obj) directly
     * @param id Identifier to delete
     */
    void deleteTrackerListTasktype(final Integer id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a TrackerListTasktype object
     */
    TrackerListTasktype loadTrackerListTasktype(final Integer id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     TrackerListTasktype getTrackerListTasktype(final Integer id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (TrackerListVersion obj) directly
     * @param id Identifier to delete
     */
    void deleteTrackerListVersion(final Integer id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a TrackerListVersion object
     */
    TrackerListVersion loadTrackerListVersion(final Integer id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     TrackerListVersion getTrackerListVersion(final Integer id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (TrackerLocationGetType obj) directly
     * @param id Identifier to delete
     */
    void deleteTrackerLocationGetType(final Integer id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a TrackerLocationGetType object
     */
    TrackerLocationGetType loadTrackerLocationGetType(final Integer id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     TrackerLocationGetType getTrackerLocationGetType(final Integer id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (TrackerNotifications obj) directly
     * @param id Identifier to delete
     */
    void deleteTrackerNotifications(final Integer id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a TrackerNotifications object
     */
    TrackerNotifications loadTrackerNotifications(final Integer id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     TrackerNotifications getTrackerNotifications(final Integer id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (TrackerNotificationMessages obj) directly
     * @param id Identifier to delete
     */
    void deleteTrackerNotificationMessages(final Integer id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a TrackerNotificationMessages object
     */
    TrackerNotificationMessages loadTrackerNotificationMessages(final Integer id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     TrackerNotificationMessages getTrackerNotificationMessages(final Integer id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (TrackerNotificationRecipients obj) directly
     * @param id Identifier to delete
     */
    void deleteTrackerNotificationRecipients(final Integer id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a TrackerNotificationRecipients object
     */
    TrackerNotificationRecipients loadTrackerNotificationRecipients(final Integer id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     TrackerNotificationRecipients getTrackerNotificationRecipients(final Integer id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (TrackerPrefs obj) directly
     * @param id Identifier to delete
     */
    void deleteTrackerPrefs(final Integer id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a TrackerPrefs object
     */
    TrackerPrefs loadTrackerPrefs(final Integer id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     TrackerPrefs getTrackerPrefs(final Integer id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (TrackerProjects obj) directly
     * @param id Identifier to delete
     */
    void deleteTrackerProjects(final Integer id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a TrackerProjects object
     */
    TrackerProjects loadTrackerProjects(final Integer id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     TrackerProjects getTrackerProjects(final Integer id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (TrackerRegistrations obj) directly
     * @param id Identifier to delete
     */
    void deleteTrackerRegistrations(final Integer id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a TrackerRegistrations object
     */
    TrackerRegistrations loadTrackerRegistrations(final Integer id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     TrackerRegistrations getTrackerRegistrations(final Integer id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (TrackerRelated obj) directly
     * @param id Identifier to delete
     */
    void deleteTrackerRelated(final Integer id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a TrackerRelated object
     */
    TrackerRelated loadTrackerRelated(final Integer id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     TrackerRelated getTrackerRelated(final Integer id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (TrackerReminders obj) directly
     * @param id Identifier to delete
     */
    void deleteTrackerReminders(final Integer id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a TrackerReminders object
     */
    TrackerReminders loadTrackerReminders(final Integer id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     TrackerReminders getTrackerReminders(final Integer id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (TrackerSearches obj) directly
     * @param id Identifier to delete
     */
    void deleteTrackerSearches(final Integer id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a TrackerSearches object
     */
    TrackerSearches loadTrackerSearches(final Integer id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     TrackerSearches getTrackerSearches(final Integer id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (TrackerTableChangeLog obj) directly
     * @param id Identifier to delete
     */
    void deleteTrackerTableChangeLog(final Integer id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a TrackerTableChangeLog object
     */
    TrackerTableChangeLog loadTrackerTableChangeLog(final Integer id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     TrackerTableChangeLog getTrackerTableChangeLog(final Integer id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (TrackerTasks obj) directly
     * @param id Identifier to delete
     */
    void deleteTrackerTasks(final Integer id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a TrackerTasks object
     */
    TrackerTasks loadTrackerTasks(final Integer id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     TrackerTasks getTrackerTasks(final Integer id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (TrackerUsers obj) directly
     * @param id Identifier to delete
     */
    void deleteTrackerUsers(final Integer id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a TrackerUsers object
     */
    TrackerUsers loadTrackerUsers(final Integer id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     TrackerUsers getTrackerUsers(final Integer id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (TrackerUsersInGroups obj) directly
     * @param id Identifier to delete
     */
    void deleteTrackerUsersInGroups(final Integer id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a TrackerUsersInGroups object
     */
    TrackerUsersInGroups loadTrackerUsersInGroups(final Integer id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     TrackerUsersInGroups getTrackerUsersInGroups(final Integer id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (TrackerUserLocationLog obj) directly
     * @param id Identifier to delete
     */
    void deleteTrackerUserLocationLog(final Integer id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a TrackerUserLocationLog object
     */
    TrackerUserLocationLog loadTrackerUserLocationLog(final Integer id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     TrackerUserLocationLog getTrackerUserLocationLog(final Integer id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (TrackerUserMobileSetting obj) directly
     * @param id Identifier to delete
     */
    void deleteTrackerUserMobileSetting(final Integer id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a TrackerUserMobileSetting object
     */
    TrackerUserMobileSetting loadTrackerUserMobileSetting(final Integer id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     TrackerUserMobileSetting getTrackerUserMobileSetting(final Integer id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (TrackerUserSession obj) directly
     * @param id Identifier to delete
     */
    void deleteTrackerUserSession(final Integer id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a TrackerUserSession object
     */
    TrackerUserSession loadTrackerUserSession(final Integer id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     TrackerUserSession getTrackerUserSession(final Integer id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (TrackerVotes obj) directly
     * @param id Identifier to delete
     */
    void deleteTrackerVotes(final Integer id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a TrackerVotes object
     */
    TrackerVotes loadTrackerVotes(final Integer id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     TrackerVotes getTrackerVotes(final Integer id);  
    /** Returns a query handle.
     * @param query Query to use
     * @return A query instance
     */
     Query createQuery(final String query);
    /** Returns a criteria handle.
     * @param criteria Criteria to use
     * @return A criteria instance
     */
     Criteria createCriteria(final String criteria);
    /** Returns a Query handle based on your package-level named query.
     * @param query Query to use
     * @return A query instance
     */
     Query getNamedQuery(final String query);
    /** Create a new Criteria instance, for the given entity class, or a superclass of an entity class.
	* @param persistentObject a class, which is persistent, or has persistent subclasses 
	* @return Criteria instance
	*/
	@SuppressWarnings("unchecked")
	Criteria createCriteria(Class persistentObject);
    /** Flushes the currently open session.
	*/
	void flushSession();
    /** Clears the currently open session.
	*/
	void clearSession();
    /** Flushes and clears the currently open session.
	*/
	void flushAndClearSession();
	/** Call currentSession.replicate.
	 * @param obj to replicate
	 * @param replicationMode mode
	 */ 
	void replicate(Object obj, ReplicationMode replicationMode);
	/** Hibernate Merge. 
	 * @param obj to merge
	 * @return obj merged.
	 */
	Object merge(Object obj);
	/** Returns the current session.
	 * @return the currently active session
	 */
	Session getCurrentSession();
	/** Returns a query handle.
     * @param query Query to use
     * @return A query instance
     */
     SQLQuery createSQLQuery(final String query);
    /** Remove this instance from the session cache. 
	 * Changes to the instance will not be synchronized with the database
	 * @param obj object to evict
	 */
	void evict(Object obj);
    /**
     * Return the persistent instance of the given entity class with the given 
     * identifier, or null if there is no such persistent instance. 
     * (If the instance, or a proxy for the instance, is already 
     * associated with the session, return that instance or proxy)
     *
     * @param clazz a persistent class
     * @param id a valid identifier of an existing persistent instance of the class
     * @return a persistent instance or null
     * @throws HibernateException
     */
	Object get(Class<?> clazz, Serializable id) throws HibernateException;	


    /**
     * Return the persistent instance of the given entity class with the given identifier, assuming that the instance exists.
     *You should not use this method to determine if an instance exists (use get() instead). Use this only to retrieve an instance that you assume exists, where non-existence would be an actual error.
     *
     * @param clazz a persistent class
     * @param id a valid identifier of an existing persistent instance of the class
     * @return the persistent instance or proxy
     * @throws HibernateException
     */
	Object load(Class<?> clazz, Serializable id) throws HibernateException;
	/**
	 * Reattaches the given entity to the current session using LockMode.NONE
	 *
	 * @param entity to reattach
	 */
	void reattachEntityWithNoLock(IPojoGenEntity entity);
	/**
	 * Reattaches the given entities to the current session.
	 *
	 * @param entities to attach
	 */
	void reattachEntitiesWithNoLock(Collection<? extends IPojoGenEntity> entities);}

