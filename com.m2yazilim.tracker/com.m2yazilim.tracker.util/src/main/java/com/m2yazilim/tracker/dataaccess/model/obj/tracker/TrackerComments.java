package com.m2yazilim.tracker.dataaccess.model.obj.tracker;

import com.felees.hbnpojogen.persistence.IPojoGenEntity;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.TrackerAttachments;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.iface.ITrackerComments;
import java.io.Serializable;
import java.util.Collections;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.proxy.HibernateProxy;


/** 
 * Object mapping for hibernate-handled table: tracker_comments.
 * @author autogenerated
 */

@Entity
@Table(name = "tracker_comments")
public class TrackerComments implements Cloneable, Serializable, IPojoGenEntity, ITrackerComments {

	/** Serial Version UID. */
	private static final long serialVersionUID = -558981854L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Integer> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, Integer>());
	
	/** hashCode temporary storage. */
	private volatile Integer hashCode;
	

	/** Field mapping. */
	private String commentText;
	/** Field mapping. */
	private Integer dateAdded;
	/** Field mapping. */
	private Integer id = 0; // init for hibernate bug workaround
	/** Field mapping. */
	private Integer lastEditedTime;
	/** Field mapping. */
	private TrackerTasks task;
	/** Field mapping. */
	private Set<TrackerAttachments> trackerAttachmentss = new HashSet<TrackerAttachments>();

	/** Field mapping. */
	private TrackerUsers user;
	/** Field mapping. */
	private Integer version;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public TrackerComments() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public TrackerComments(Integer id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param dateAdded Integer object;
	 * @param id Integer object;
	 * @param lastEditedTime Integer object;
	 * @param task TrackerTasks object;
	 * @param user TrackerUsers object;
	 * @param version Integer object;
	 */
	public TrackerComments(Integer dateAdded, Integer id, Integer lastEditedTime, 					
			TrackerTasks task, TrackerUsers user, Integer version) {

		this.dateAdded = dateAdded;
		this.id = id;
		this.lastEditedTime = lastEditedTime;
		this.task = task;
		this.user = user;
		this.version = version;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return TrackerComments.class;
	}
 

    /**
     * Return the value associated with the column: commentText.
	 * @return A String object (this.commentText)
	 */
	@Basic( optional = true )
	@Column( name = "comment_text", length = 21845  )
	public String getCommentText() {
		return this.commentText;
		
	}
	

  
    /**  
     * Set the value related to the column: commentText.
	 * @param commentText the commentText value you wish to set
	 */
	public void setCommentText(final String commentText) {
		this.commentText = commentText;
	}

    /**
     * Return the value associated with the column: dateAdded.
	 * @return A Integer object (this.dateAdded)
	 */
	@Basic( optional = false )
	@Column( name = "date_added", nullable = false  )
	public Integer getDateAdded() {
		return this.dateAdded;
		
	}
	

  
    /**  
     * Set the value related to the column: dateAdded.
	 * @param dateAdded the dateAdded value you wish to set
	 */
	public void setDateAdded(final Integer dateAdded) {
		this.dateAdded = dateAdded;
	}

    /**
     * Return the value associated with the column: id.
	 * @return A Integer object (this.id)
	 */
    @Id 
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Basic( optional = false )
	@Column( name = "comment_id", nullable = false  )
	public Integer getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Integer id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null || this.id == 0) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: lastEditedTime.
	 * @return A Integer object (this.lastEditedTime)
	 */
	@Basic( optional = false )
	@Column( name = "last_edited_time", nullable = false  )
	public Integer getLastEditedTime() {
		return this.lastEditedTime;
		
	}
	

  
    /**  
     * Set the value related to the column: lastEditedTime.
	 * @param lastEditedTime the lastEditedTime value you wish to set
	 */
	public void setLastEditedTime(final Integer lastEditedTime) {
		this.lastEditedTime = lastEditedTime;
	}

    /**
     * Return the value associated with the column: task.
	 * @return A TrackerTasks object (this.task)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@JoinColumn(name = "task_id", nullable = false )
	public TrackerTasks getTask() {
		return this.task;
		
	}
	

  
    /**  
     * Set the value related to the column: task.
	 * @param task the task value you wish to set
	 */
	public void setTask(final TrackerTasks task) {
		this.task = task;
	}

    /**
     * Return the value associated with the column: trackerAttachments.
	 * @return A Set&lt;TrackerAttachments&gt; object (this.trackerAttachments)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "comment"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "comment_id", nullable = false  )
	public Set<TrackerAttachments> getTrackerAttachmentss() {
		return this.trackerAttachmentss;
		
	}
	
	/**
	 * Adds a bi-directional link of type TrackerAttachments to the trackerAttachmentss set.
	 * @param trackerAttachments item to add
	 */
	public void addTrackerAttachments(TrackerAttachments trackerAttachments) {
		trackerAttachments.setComment(this);
		this.trackerAttachmentss.add(trackerAttachments);
	}

  
    /**  
     * Set the value related to the column: trackerAttachments.
	 * @param trackerAttachments the trackerAttachments value you wish to set
	 */
	public void setTrackerAttachmentss(final Set<TrackerAttachments> trackerAttachments) {
		this.trackerAttachmentss = trackerAttachments;
	}

    /**
     * Return the value associated with the column: user.
	 * @return A TrackerUsers object (this.user)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@JoinColumn(name = "user_id", nullable = false )
	public TrackerUsers getUser() {
		return this.user;
		
	}
	

  
    /**  
     * Set the value related to the column: user.
	 * @param user the user value you wish to set
	 */
	public void setUser(final TrackerUsers user) {
		this.user = user;
	}

    /**
     * Return the value associated with the column: version.
	 * @return A Integer object (this.version)
	 */
	@Basic( optional = false )
	@Column( nullable = false  )
	public Integer getVersion() {
		return this.version;
		
	}
	

  
    /**  
     * Set the value related to the column: version.
	 * @param version the version value you wish to set
	 */
	public void setVersion(final Integer version) {
		this.version = version;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public TrackerComments clone() throws CloneNotSupportedException {
		
        final TrackerComments copy = (TrackerComments)super.clone();

		copy.setCommentText(this.getCommentText());
		copy.setDateAdded(this.getDateAdded());
		copy.setId(this.getId());
		copy.setLastEditedTime(this.getLastEditedTime());
		copy.setTask(this.getTask());
		if (this.getTrackerAttachmentss() != null) {
			copy.getTrackerAttachmentss().addAll(this.getTrackerAttachmentss());
		}
		copy.setUser(this.getUser());
		copy.setVersion(this.getVersion());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("commentText: " + this.getCommentText() + ", ");
		sb.append("dateAdded: " + this.getDateAdded() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("lastEditedTime: " + this.getLastEditedTime() + ", ");
		sb.append("version: " + this.getVersion());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final TrackerComments that; 
		try {
			that = (TrackerComments) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getCommentText() == null) && (that.getCommentText() == null)) || (getCommentText() != null && getCommentText().equals(that.getCommentText())));
		result = result && (((getDateAdded() == null) && (that.getDateAdded() == null)) || (getDateAdded() != null && getDateAdded().equals(that.getDateAdded())));
		result = result && (((getLastEditedTime() == null) && (that.getLastEditedTime() == null)) || (getLastEditedTime() != null && getLastEditedTime().equals(that.getLastEditedTime())));
		result = result && (((getTask() == null) && (that.getTask() == null)) || (getTask() != null && getTask().getId().equals(that.getTask().getId())));	
		result = result && (((getUser() == null) && (that.getUser() == null)) || (getUser() != null && getUser().getId().equals(that.getUser().getId())));	
		result = result && (((getVersion() == null) && (that.getVersion() == null)) || (getVersion() != null && getVersion().equals(that.getVersion())));
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					Integer newHashCode = null;

					if ( getId() != null ) {
					newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null && getId() != 0) {
							newHashCode = getId();
						} else {

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode;
	}
	

	
}
