package com.m2yazilim.tracker.dataaccess.model.obj.tracker;

import com.felees.hbnpojogen.persistence.IPojoGenEntity;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.iface.ITrackerAdminRequests;
import java.io.Serializable;
import java.util.Collections;
import java.util.Map;
import java.util.WeakHashMap;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.proxy.HibernateProxy;


/** 
 * Object mapping for hibernate-handled table: tracker_admin_requests.
 * @author autogenerated
 */

@Entity
@Table(name = "tracker_admin_requests")
public class TrackerAdminRequests implements Cloneable, Serializable, IPojoGenEntity, ITrackerAdminRequests {

	/** Serial Version UID. */
	private static final long serialVersionUID = -558981860L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Integer> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, Integer>());
	
	/** hashCode temporary storage. */
	private volatile Integer hashCode;
	

	/** Field mapping. */
	private String denyReason;
	/** Field mapping. */
	private Integer id = 0; // init for hibernate bug workaround
	/** Field mapping. */
	private TrackerProjects project;
	/** Field mapping. */
	private String reasonGiven;
	/** Field mapping. */
	private Integer requestType;
	/** Field mapping. */
	private TrackerUsers resolvedBy;
	/** Field mapping. */
	private TrackerUsers submittedBy;
	/** Field mapping. */
	private TrackerTasks task;
	/** Field mapping. */
	private Integer timeResolved;
	/** Field mapping. */
	private Integer timeSubmitted;
	/** Field mapping. */
	private Integer version;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public TrackerAdminRequests() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public TrackerAdminRequests(Integer id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param id Integer object;
	 * @param project TrackerProjects object;
	 * @param requestType Integer object;
	 * @param resolvedBy TrackerUsers object;
	 * @param submittedBy TrackerUsers object;
	 * @param task TrackerTasks object;
	 * @param timeResolved Integer object;
	 * @param timeSubmitted Integer object;
	 * @param version Integer object;
	 */
	public TrackerAdminRequests(Integer id, TrackerProjects project, Integer requestType, 					
			TrackerUsers resolvedBy, TrackerUsers submittedBy, TrackerTasks task, 					
			Integer timeResolved, Integer timeSubmitted, Integer version) {

		this.id = id;
		this.project = project;
		this.requestType = requestType;
		this.resolvedBy = resolvedBy;
		this.submittedBy = submittedBy;
		this.task = task;
		this.timeResolved = timeResolved;
		this.timeSubmitted = timeSubmitted;
		this.version = version;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return TrackerAdminRequests.class;
	}
 

    /**
     * Return the value associated with the column: denyReason.
	 * @return A String object (this.denyReason)
	 */
	@Basic( optional = true )
	@Column( name = "deny_reason", length = 255  )
	public String getDenyReason() {
		return this.denyReason;
		
	}
	

  
    /**  
     * Set the value related to the column: denyReason.
	 * @param denyReason the denyReason value you wish to set
	 */
	public void setDenyReason(final String denyReason) {
		this.denyReason = denyReason;
	}

    /**
     * Return the value associated with the column: id.
	 * @return A Integer object (this.id)
	 */
    @Id 
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Basic( optional = false )
	@Column( name = "request_id", nullable = false  )
	public Integer getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Integer id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null || this.id == 0) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: project.
	 * @return A TrackerProjects object (this.project)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@JoinColumn(name = "project_id", nullable = false )
	public TrackerProjects getProject() {
		return this.project;
		
	}
	

  
    /**  
     * Set the value related to the column: project.
	 * @param project the project value you wish to set
	 */
	public void setProject(final TrackerProjects project) {
		this.project = project;
	}

    /**
     * Return the value associated with the column: reasonGiven.
	 * @return A String object (this.reasonGiven)
	 */
	@Basic( optional = true )
	@Column( name = "reason_given", length = 21845  )
	public String getReasonGiven() {
		return this.reasonGiven;
		
	}
	

  
    /**  
     * Set the value related to the column: reasonGiven.
	 * @param reasonGiven the reasonGiven value you wish to set
	 */
	public void setReasonGiven(final String reasonGiven) {
		this.reasonGiven = reasonGiven;
	}

    /**
     * Return the value associated with the column: requestType.
	 * @return A Integer object (this.requestType)
	 */
	@Basic( optional = false )
	@Column( name = "request_type", nullable = false  )
	public Integer getRequestType() {
		return this.requestType;
		
	}
	

  
    /**  
     * Set the value related to the column: requestType.
	 * @param requestType the requestType value you wish to set
	 */
	public void setRequestType(final Integer requestType) {
		this.requestType = requestType;
	}

    /**
     * Return the value associated with the column: resolvedBy.
	 * @return A TrackerUsers object (this.resolvedBy)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@JoinColumn(name = "resolved_by", nullable = false )
	public TrackerUsers getResolvedBy() {
		return this.resolvedBy;
		
	}
	

  
    /**  
     * Set the value related to the column: resolvedBy.
	 * @param resolvedBy the resolvedBy value you wish to set
	 */
	public void setResolvedBy(final TrackerUsers resolvedBy) {
		this.resolvedBy = resolvedBy;
	}

    /**
     * Return the value associated with the column: submittedBy.
	 * @return A TrackerUsers object (this.submittedBy)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@JoinColumn(name = "submitted_by", nullable = false )
	public TrackerUsers getSubmittedBy() {
		return this.submittedBy;
		
	}
	

  
    /**  
     * Set the value related to the column: submittedBy.
	 * @param submittedBy the submittedBy value you wish to set
	 */
	public void setSubmittedBy(final TrackerUsers submittedBy) {
		this.submittedBy = submittedBy;
	}

    /**
     * Return the value associated with the column: task.
	 * @return A TrackerTasks object (this.task)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@JoinColumn(name = "task_id", nullable = false )
	public TrackerTasks getTask() {
		return this.task;
		
	}
	

  
    /**  
     * Set the value related to the column: task.
	 * @param task the task value you wish to set
	 */
	public void setTask(final TrackerTasks task) {
		this.task = task;
	}

    /**
     * Return the value associated with the column: timeResolved.
	 * @return A Integer object (this.timeResolved)
	 */
	@Basic( optional = false )
	@Column( name = "time_resolved", nullable = false  )
	public Integer getTimeResolved() {
		return this.timeResolved;
		
	}
	

  
    /**  
     * Set the value related to the column: timeResolved.
	 * @param timeResolved the timeResolved value you wish to set
	 */
	public void setTimeResolved(final Integer timeResolved) {
		this.timeResolved = timeResolved;
	}

    /**
     * Return the value associated with the column: timeSubmitted.
	 * @return A Integer object (this.timeSubmitted)
	 */
	@Basic( optional = false )
	@Column( name = "time_submitted", nullable = false  )
	public Integer getTimeSubmitted() {
		return this.timeSubmitted;
		
	}
	

  
    /**  
     * Set the value related to the column: timeSubmitted.
	 * @param timeSubmitted the timeSubmitted value you wish to set
	 */
	public void setTimeSubmitted(final Integer timeSubmitted) {
		this.timeSubmitted = timeSubmitted;
	}

    /**
     * Return the value associated with the column: version.
	 * @return A Integer object (this.version)
	 */
	@Basic( optional = false )
	@Column( nullable = false  )
	public Integer getVersion() {
		return this.version;
		
	}
	

  
    /**  
     * Set the value related to the column: version.
	 * @param version the version value you wish to set
	 */
	public void setVersion(final Integer version) {
		this.version = version;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public TrackerAdminRequests clone() throws CloneNotSupportedException {
		
        final TrackerAdminRequests copy = (TrackerAdminRequests)super.clone();

		copy.setDenyReason(this.getDenyReason());
		copy.setId(this.getId());
		copy.setProject(this.getProject());
		copy.setReasonGiven(this.getReasonGiven());
		copy.setRequestType(this.getRequestType());
		copy.setResolvedBy(this.getResolvedBy());
		copy.setSubmittedBy(this.getSubmittedBy());
		copy.setTask(this.getTask());
		copy.setTimeResolved(this.getTimeResolved());
		copy.setTimeSubmitted(this.getTimeSubmitted());
		copy.setVersion(this.getVersion());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("denyReason: " + this.getDenyReason() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("reasonGiven: " + this.getReasonGiven() + ", ");
		sb.append("requestType: " + this.getRequestType() + ", ");
		sb.append("timeResolved: " + this.getTimeResolved() + ", ");
		sb.append("timeSubmitted: " + this.getTimeSubmitted() + ", ");
		sb.append("version: " + this.getVersion());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final TrackerAdminRequests that; 
		try {
			that = (TrackerAdminRequests) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getDenyReason() == null) && (that.getDenyReason() == null)) || (getDenyReason() != null && getDenyReason().equals(that.getDenyReason())));
		result = result && (((getProject() == null) && (that.getProject() == null)) || (getProject() != null && getProject().getId().equals(that.getProject().getId())));	
		result = result && (((getReasonGiven() == null) && (that.getReasonGiven() == null)) || (getReasonGiven() != null && getReasonGiven().equals(that.getReasonGiven())));
		result = result && (((getRequestType() == null) && (that.getRequestType() == null)) || (getRequestType() != null && getRequestType().equals(that.getRequestType())));
		result = result && (((getResolvedBy() == null) && (that.getResolvedBy() == null)) || (getResolvedBy() != null && getResolvedBy().getId().equals(that.getResolvedBy().getId())));	
		result = result && (((getSubmittedBy() == null) && (that.getSubmittedBy() == null)) || (getSubmittedBy() != null && getSubmittedBy().getId().equals(that.getSubmittedBy().getId())));	
		result = result && (((getTask() == null) && (that.getTask() == null)) || (getTask() != null && getTask().getId().equals(that.getTask().getId())));	
		result = result && (((getTimeResolved() == null) && (that.getTimeResolved() == null)) || (getTimeResolved() != null && getTimeResolved().equals(that.getTimeResolved())));
		result = result && (((getTimeSubmitted() == null) && (that.getTimeSubmitted() == null)) || (getTimeSubmitted() != null && getTimeSubmitted().equals(that.getTimeSubmitted())));
		result = result && (((getVersion() == null) && (that.getVersion() == null)) || (getVersion() != null && getVersion().equals(that.getVersion())));
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					Integer newHashCode = null;

					if ( getId() != null ) {
					newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null && getId() != 0) {
							newHashCode = getId();
						} else {

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode;
	}
	

	
}
