package com.m2yazilim.tracker.dataaccess.model.obj.tracker;

import com.felees.hbnpojogen.persistence.IPojoGenEntity;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.TrackerNotificationRecipients;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.iface.ITrackerNotificationMessages;
import java.io.Serializable;
import java.util.Collections;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.proxy.HibernateProxy;


/** 
 * Object mapping for hibernate-handled table: tracker_notification_messages.
 * @author autogenerated
 */

@Entity
@Table(name = "tracker_notification_messages")
public class TrackerNotificationMessages implements Cloneable, Serializable, IPojoGenEntity, ITrackerNotificationMessages {

	/** Serial Version UID. */
	private static final long serialVersionUID = -558981842L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Integer> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, Integer>());
	
	/** hashCode temporary storage. */
	private volatile Integer hashCode;
	

	/** Field mapping. */
	private Integer id = 0; // init for hibernate bug workaround
	/** Field mapping. */
	private String messageBody;
	/** Field mapping. */
	private String messageSubject;
	/** Field mapping. */
	private Integer timeCreated;
	/** Field mapping. */
	private Set<TrackerNotificationRecipients> trackerNotificationRecipientss = new HashSet<TrackerNotificationRecipients>();

	/** Field mapping. */
	private Integer version;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public TrackerNotificationMessages() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public TrackerNotificationMessages(Integer id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param id Integer object;
	 * @param timeCreated Integer object;
	 * @param version Integer object;
	 */
	public TrackerNotificationMessages(Integer id, Integer timeCreated, Integer version) {

		this.id = id;
		this.timeCreated = timeCreated;
		this.version = version;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return TrackerNotificationMessages.class;
	}
 

    /**
     * Return the value associated with the column: id.
	 * @return A Integer object (this.id)
	 */
    @Id 
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Basic( optional = false )
	@Column( name = "message_id", nullable = false  )
	public Integer getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Integer id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null || this.id == 0) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: messageBody.
	 * @return A String object (this.messageBody)
	 */
	@Basic( optional = true )
	@Column( name = "message_body", length = 21845  )
	public String getMessageBody() {
		return this.messageBody;
		
	}
	

  
    /**  
     * Set the value related to the column: messageBody.
	 * @param messageBody the messageBody value you wish to set
	 */
	public void setMessageBody(final String messageBody) {
		this.messageBody = messageBody;
	}

    /**
     * Return the value associated with the column: messageSubject.
	 * @return A String object (this.messageSubject)
	 */
	@Basic( optional = true )
	@Column( name = "message_subject", length = 21845  )
	public String getMessageSubject() {
		return this.messageSubject;
		
	}
	

  
    /**  
     * Set the value related to the column: messageSubject.
	 * @param messageSubject the messageSubject value you wish to set
	 */
	public void setMessageSubject(final String messageSubject) {
		this.messageSubject = messageSubject;
	}

    /**
     * Return the value associated with the column: timeCreated.
	 * @return A Integer object (this.timeCreated)
	 */
	@Basic( optional = false )
	@Column( name = "time_created", nullable = false  )
	public Integer getTimeCreated() {
		return this.timeCreated;
		
	}
	

  
    /**  
     * Set the value related to the column: timeCreated.
	 * @param timeCreated the timeCreated value you wish to set
	 */
	public void setTimeCreated(final Integer timeCreated) {
		this.timeCreated = timeCreated;
	}

    /**
     * Return the value associated with the column: trackerNotificationRecipients.
	 * @return A Set&lt;TrackerNotificationRecipients&gt; object (this.trackerNotificationRecipients)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "message"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "message_id", nullable = false  )
	public Set<TrackerNotificationRecipients> getTrackerNotificationRecipientss() {
		return this.trackerNotificationRecipientss;
		
	}
	
	/**
	 * Adds a bi-directional link of type TrackerNotificationRecipients to the trackerNotificationRecipientss set.
	 * @param trackerNotificationRecipients item to add
	 */
	public void addTrackerNotificationRecipients(TrackerNotificationRecipients trackerNotificationRecipients) {
		trackerNotificationRecipients.setMessage(this);
		this.trackerNotificationRecipientss.add(trackerNotificationRecipients);
	}

  
    /**  
     * Set the value related to the column: trackerNotificationRecipients.
	 * @param trackerNotificationRecipients the trackerNotificationRecipients value you wish to set
	 */
	public void setTrackerNotificationRecipientss(final Set<TrackerNotificationRecipients> trackerNotificationRecipients) {
		this.trackerNotificationRecipientss = trackerNotificationRecipients;
	}

    /**
     * Return the value associated with the column: version.
	 * @return A Integer object (this.version)
	 */
	@Basic( optional = false )
	@Column( nullable = false  )
	public Integer getVersion() {
		return this.version;
		
	}
	

  
    /**  
     * Set the value related to the column: version.
	 * @param version the version value you wish to set
	 */
	public void setVersion(final Integer version) {
		this.version = version;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public TrackerNotificationMessages clone() throws CloneNotSupportedException {
		
        final TrackerNotificationMessages copy = (TrackerNotificationMessages)super.clone();

		copy.setId(this.getId());
		copy.setMessageBody(this.getMessageBody());
		copy.setMessageSubject(this.getMessageSubject());
		copy.setTimeCreated(this.getTimeCreated());
		if (this.getTrackerNotificationRecipientss() != null) {
			copy.getTrackerNotificationRecipientss().addAll(this.getTrackerNotificationRecipientss());
		}
		copy.setVersion(this.getVersion());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("id: " + this.getId() + ", ");
		sb.append("messageBody: " + this.getMessageBody() + ", ");
		sb.append("messageSubject: " + this.getMessageSubject() + ", ");
		sb.append("timeCreated: " + this.getTimeCreated() + ", ");
		sb.append("version: " + this.getVersion());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final TrackerNotificationMessages that; 
		try {
			that = (TrackerNotificationMessages) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getMessageBody() == null) && (that.getMessageBody() == null)) || (getMessageBody() != null && getMessageBody().equals(that.getMessageBody())));
		result = result && (((getMessageSubject() == null) && (that.getMessageSubject() == null)) || (getMessageSubject() != null && getMessageSubject().equals(that.getMessageSubject())));
		result = result && (((getTimeCreated() == null) && (that.getTimeCreated() == null)) || (getTimeCreated() != null && getTimeCreated().equals(that.getTimeCreated())));
		result = result && (((getVersion() == null) && (that.getVersion() == null)) || (getVersion() != null && getVersion().equals(that.getVersion())));
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					Integer newHashCode = null;

					if ( getId() != null ) {
					newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null && getId() != 0) {
							newHashCode = getId();
						} else {

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode;
	}
	

	
}
