package com.m2yazilim.tracker.dataaccess.factories.tracker;

import com.felees.hbnpojogen.randomlib.data.dataGeneration.*;
import com.m2yazilim.tracker.dataaccess.factories.tracker.TrackerDataPoolFactory;
import com.m2yazilim.tracker.dataaccess.model.obj.tracker.*;
import org.springframework.stereotype.Component;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.Multimap;
import java.util.Collection;

/** 
 * DAO factory implementation.
 * @author autogenerated
 */
@Component
public class TrackerDataPoolFactory {
	/** Table commit order. */
    private static final Multimap<String, String> tableDeps = ArrayListMultimap.create();
	/** DB commit order. */
	private static final String[] commitOrder = new String[]{"TrackerAttachments", "TrackerReminders", "TrackerRelated", "TrackerNotifications", "TrackerHistory", "TrackerDependencies", "TrackerComments", "TrackerCache", "TrackerAssignedOld", "TrackerAssigned", "TrackerAdminRequests", "TrackerVotes", "TrackerUsersInGroups", "TrackerTasks", "TrackerListVersion", "TrackerListTasktype", "TrackerListStatus", "TrackerListResolution", "TrackerListOs", "TrackerListCategory", "TrackerGroups", "TrackerUserSession", "TrackerUserMobileSetting", "TrackerUserLocationLog", "TrackerSearches", "TrackerProjects", "TrackerUsers", "TrackerTableChangeLog", "TrackerRegistrations", "TrackerPrefs", "TrackerNotificationRecipients", "TrackerNotificationMessages", "TrackerLocationGetType", "TrackerCity"};
	static{
		// Store table deps for possible use. 
 		tableDeps.put("TrackerAdminRequests", "TrackerProjects");
 		tableDeps.put("TrackerAdminRequests", "TrackerTasks");
 		tableDeps.put("TrackerAdminRequests", "TrackerUsers");
 		tableDeps.put("TrackerAssigned", "TrackerTasks");
 		tableDeps.put("TrackerAssigned", "TrackerUsers");
 		tableDeps.put("TrackerAssignedOld", "TrackerAssigned");
 		tableDeps.put("TrackerAssignedOld", "TrackerTasks");
 		tableDeps.put("TrackerAssignedOld", "TrackerUsers");
 		tableDeps.put("TrackerAttachments", "TrackerComments");
 		tableDeps.put("TrackerAttachments", "TrackerTasks");
 		tableDeps.put("TrackerAttachments", "TrackerUsers");
 		tableDeps.put("TrackerCache", "TrackerListVersion");
 		tableDeps.put("TrackerComments", "TrackerTasks");
 		tableDeps.put("TrackerComments", "TrackerUsers");
 		tableDeps.put("TrackerDependencies", "TrackerTasks");
 		tableDeps.put("TrackerGroups", "TrackerProjects");
 		tableDeps.put("TrackerHistory", "TrackerTasks");
 		tableDeps.put("TrackerHistory", "TrackerUsers");
 		tableDeps.put("TrackerListCategory", "TrackerProjects");
 		tableDeps.put("TrackerListCategory", "TrackerUsers");
 		tableDeps.put("TrackerListOs", "TrackerProjects");
 		tableDeps.put("TrackerListResolution", "TrackerProjects");
 		tableDeps.put("TrackerListStatus", "TrackerProjects");
 		tableDeps.put("TrackerListTasktype", "TrackerProjects");
 		tableDeps.put("TrackerListVersion", "TrackerProjects");
 		tableDeps.put("TrackerNotifications", "TrackerTasks");
 		tableDeps.put("TrackerNotifications", "TrackerUsers");
 		tableDeps.put("TrackerNotificationRecipients", "TrackerNotificationMessages");
 		tableDeps.put("TrackerProjects", "TrackerUsers");
 		tableDeps.put("TrackerRelated", "TrackerTasks");
 		tableDeps.put("TrackerReminders", "TrackerTasks");
 		tableDeps.put("TrackerReminders", "TrackerUsers");
 		tableDeps.put("TrackerSearches", "TrackerUsers");
 		tableDeps.put("TrackerTasks", "TrackerListCategory");
 		tableDeps.put("TrackerTasks", "TrackerListOs");
 		tableDeps.put("TrackerTasks", "TrackerListResolution");
 		tableDeps.put("TrackerTasks", "TrackerListStatus");
 		tableDeps.put("TrackerTasks", "TrackerListTasktype");
 		tableDeps.put("TrackerTasks", "TrackerListVersion");
 		tableDeps.put("TrackerTasks", "TrackerProjects");
 		tableDeps.put("TrackerTasks", "TrackerUsers");
 		tableDeps.put("TrackerUsersInGroups", "TrackerGroups");
 		tableDeps.put("TrackerUsersInGroups", "TrackerUsers");
 		tableDeps.put("TrackerUserLocationLog", "TrackerLocationGetType");
 		tableDeps.put("TrackerUserLocationLog", "TrackerUsers");
 		tableDeps.put("TrackerUserMobileSetting", "TrackerLocationGetType");
 		tableDeps.put("TrackerUserMobileSetting", "TrackerUsers");
 		tableDeps.put("TrackerUserSession", "TrackerUsers");
 		tableDeps.put("TrackerVotes", "TrackerTasks");
 		tableDeps.put("TrackerVotes", "TrackerUsers");
	}

    /**
     * Data pool factory for TrackerAdminRequests.
     * @return TrackerAdminRequests A TrackerAdminRequests object
     */
    public static TrackerAdminRequests getTrackerAdminRequests() {

        TrackerAdminRequests trackerAdminRequests =  getTrackerAdminRequests(
	        getTrackerProjects(), getTrackerUsers(), getTrackerUsers(), getTrackerTasks());

		return trackerAdminRequests;
       
    }

     /**
     * Data pool factory for TrackerAdminRequests.
     * @param project A valid TrackerProjects object
     * @param resolvedBy A valid TrackerUsers object
     * @param submittedBy A valid TrackerUsers object
     * @param task A valid TrackerTasks object
     * @return TrackerAdminRequests A TrackerAdminRequests object
     */
    public static TrackerAdminRequests getTrackerAdminRequests(TrackerProjects project, TrackerUsers resolvedBy, TrackerUsers submittedBy, TrackerTasks task) {
        TrackerAdminRequests trackerAdminRequests = new TrackerAdminRequests();     
        trackerAdminRequests.setDenyReason(BasicDataGenerator.generateRandomString(255));
		if (project != null) {
			project.addTrackerAdminRequests (trackerAdminRequests);
		}
        trackerAdminRequests.setReasonGiven(BasicDataGenerator.generateRandomString(21845));
        trackerAdminRequests.setRequestType(BasicDataGenerator.generateRandomInt());
		if (resolvedBy != null) {
			resolvedBy.addTrackerAdminRequests (trackerAdminRequests);
		}
        trackerAdminRequests.setSubmittedBy(submittedBy);
		if (task != null) {
			task.addTrackerAdminRequests (trackerAdminRequests);
		}
        trackerAdminRequests.setTimeResolved(BasicDataGenerator.generateRandomInt());
        trackerAdminRequests.setTimeSubmitted(BasicDataGenerator.generateRandomInt());
        trackerAdminRequests.setVersion(BasicDataGenerator.generateRandomInt());

        return trackerAdminRequests;
    }

    /**
     * Data pool factory for TrackerAssigned.
     * @return TrackerAssigned A TrackerAssigned object
     */
    public static TrackerAssigned getTrackerAssigned() {

        TrackerAssigned trackerAssigned =  getTrackerAssigned(
	        getTrackerTasks(), getTrackerUsers());

		return trackerAssigned;
       
    }

     /**
     * Data pool factory for TrackerAssigned.
     * @param task A valid TrackerTasks object
     * @param user A valid TrackerUsers object
     * @return TrackerAssigned A TrackerAssigned object
     */
    public static TrackerAssigned getTrackerAssigned(TrackerTasks task, TrackerUsers user) {
        TrackerAssigned trackerAssigned = new TrackerAssigned();     
		if (task != null) {
			task.addTrackerAssigned (trackerAssigned);
		}
		if (user != null) {
			user.addTrackerAssigned (trackerAssigned);
		}
        trackerAssigned.setVersion(BasicDataGenerator.generateRandomInt());

        return trackerAssigned;
    }

    /**
     * Data pool factory for TrackerAssignedOld.
     * @return TrackerAssignedOld A TrackerAssignedOld object
     */
    public static TrackerAssignedOld getTrackerAssignedOld() {

        TrackerAssignedOld trackerAssignedOld =  getTrackerAssignedOld(
	        getTrackerAssigned(), getTrackerUsers(), getTrackerTasks());

		return trackerAssignedOld;
       
    }

     /**
     * Data pool factory for TrackerAssignedOld.
     * @param assigned A valid TrackerAssigned object
     * @param oldUser A valid TrackerUsers object
     * @param task A valid TrackerTasks object
     * @return TrackerAssignedOld A TrackerAssignedOld object
     */
    public static TrackerAssignedOld getTrackerAssignedOld(TrackerAssigned assigned, TrackerUsers oldUser, TrackerTasks task) {
        TrackerAssignedOld trackerAssignedOld = new TrackerAssignedOld();     
		if (assigned != null) {
			assigned.addTrackerAssignedOld (trackerAssignedOld);
		}
        trackerAssignedOld.setCreateDate(BasicDataGenerator.generateDate());
        trackerAssignedOld.setIsSent(BasicDataGenerator.generateRandomInt());
		if (oldUser != null) {
			oldUser.addTrackerAssignedOld (trackerAssignedOld);
		}
        trackerAssignedOld.setSentDate(BasicDataGenerator.generateDate());
		if (task != null) {
			task.addTrackerAssignedOld (trackerAssignedOld);
		}

        return trackerAssignedOld;
    }

    /**
     * Data pool factory for TrackerAttachments.
     * @return TrackerAttachments A TrackerAttachments object
     */
    public static TrackerAttachments getTrackerAttachments() {

        TrackerAttachments trackerAttachments =  getTrackerAttachments(
	        getTrackerUsers(), getTrackerComments(), getTrackerTasks());

		return trackerAttachments;
       
    }

     /**
     * Data pool factory for TrackerAttachments.
     * @param addedBy A valid TrackerUsers object
     * @param comment A valid TrackerComments object
     * @param task A valid TrackerTasks object
     * @return TrackerAttachments A TrackerAttachments object
     */
    public static TrackerAttachments getTrackerAttachments(TrackerUsers addedBy, TrackerComments comment, TrackerTasks task) {
        TrackerAttachments trackerAttachments = new TrackerAttachments();     
		if (addedBy != null) {
			addedBy.addTrackerAttachments (trackerAttachments);
		}
		if (comment != null) {
			comment.addTrackerAttachments (trackerAttachments);
		}
        trackerAttachments.setDateAdded(BasicDataGenerator.generateRandomInt());
        trackerAttachments.setFileName(BasicDataGenerator.generateRandomString(30));
        trackerAttachments.setFileSize(BasicDataGenerator.generateRandomInt());
        trackerAttachments.setFileType(BasicDataGenerator.generateRandomString(255));
        trackerAttachments.setOrigName(BasicDataGenerator.generateRandomString(255));
		if (task != null) {
			task.addTrackerAttachments (trackerAttachments);
		}
        trackerAttachments.setVersion(BasicDataGenerator.generateRandomInt());

        return trackerAttachments;
    }

    /**
     * Data pool factory for TrackerCache.
     * @return TrackerCache A TrackerCache object
     */
    public static TrackerCache getTrackerCache() {

        TrackerCache trackerCache =  getTrackerCache(
	        getTrackerListVersion());

		return trackerCache;
       
    }

     /**
     * Data pool factory for TrackerCache.
     * @param project A valid TrackerListVersion object
     * @return TrackerCache A TrackerCache object
     */
    public static TrackerCache getTrackerCache(TrackerListVersion project) {
        TrackerCache trackerCache = new TrackerCache();     
        trackerCache.setContent(BasicDataGenerator.generateRandomString(715827882));
        trackerCache.setLastUpdated(BasicDataGenerator.generateRandomInt());
        trackerCache.setMaxItems(BasicDataGenerator.generateRandomInt());
        trackerCache.setProject(project);
        trackerCache.setTopic(BasicDataGenerator.generateRandomInt());
        trackerCache.setType(BasicDataGenerator.generateRandomString(4));
        trackerCache.setVersion(BasicDataGenerator.generateRandomInt());

        return trackerCache;
    }

    /**
     * Data pool factory for TrackerCity.
     * @return TrackerCityA TrackerCity object
     */
    public static TrackerCity getTrackerCity() {

        TrackerCity trackerCity = new TrackerCity();    
        
        trackerCity.setCityName(BasicDataGenerator.generateRandomString(50));
        trackerCity.setVersion(BasicDataGenerator.generateRandomInt());

        return trackerCity;
    }

    /**
     * Data pool factory for TrackerComments.
     * @return TrackerComments A TrackerComments object
     */
    public static TrackerComments getTrackerComments() {

        TrackerComments trackerComments =  getTrackerComments(
	        getTrackerTasks(), getTrackerUsers());

		return trackerComments;
       
    }

     /**
     * Data pool factory for TrackerComments.
     * @param task A valid TrackerTasks object
     * @param user A valid TrackerUsers object
     * @return TrackerComments A TrackerComments object
     */
    public static TrackerComments getTrackerComments(TrackerTasks task, TrackerUsers user) {
        TrackerComments trackerComments = new TrackerComments();     
        trackerComments.setCommentText(BasicDataGenerator.generateRandomString(21845));
        trackerComments.setDateAdded(BasicDataGenerator.generateRandomInt());
        trackerComments.setLastEditedTime(BasicDataGenerator.generateRandomInt());
		if (task != null) {
			task.addTrackerComments (trackerComments);
		}
		if (user != null) {
			user.addTrackerComments (trackerComments);
		}
        trackerComments.setVersion(BasicDataGenerator.generateRandomInt());

        return trackerComments;
    }

    /**
     * Data pool factory for TrackerDependencies.
     * @return TrackerDependencies A TrackerDependencies object
     */
    public static TrackerDependencies getTrackerDependencies() {

        TrackerDependencies trackerDependencies =  getTrackerDependencies(
	        getTrackerTasks(), getTrackerTasks());

		return trackerDependencies;
       
    }

     /**
     * Data pool factory for TrackerDependencies.
     * @param depTask A valid TrackerTasks object
     * @param task A valid TrackerTasks object
     * @return TrackerDependencies A TrackerDependencies object
     */
    public static TrackerDependencies getTrackerDependencies(TrackerTasks depTask, TrackerTasks task) {
        TrackerDependencies trackerDependencies = new TrackerDependencies();     
		if (depTask != null) {
			depTask.addTrackerDependencies (trackerDependencies);
		}
        trackerDependencies.setTask(task);
        trackerDependencies.setVersion(BasicDataGenerator.generateRandomInt());

        return trackerDependencies;
    }

    /**
     * Data pool factory for TrackerGroups.
     * @return TrackerGroups A TrackerGroups object
     */
    public static TrackerGroups getTrackerGroups() {

        TrackerGroups trackerGroups =  getTrackerGroups(
	        getTrackerProjects());

		return trackerGroups;
       
    }

     /**
     * Data pool factory for TrackerGroups.
     * @param project A valid TrackerProjects object
     * @return TrackerGroups A TrackerGroups object
     */
    public static TrackerGroups getTrackerGroups(TrackerProjects project) {
        TrackerGroups trackerGroups = new TrackerGroups();     
        trackerGroups.setAddComments(BasicDataGenerator.generateRandomInt());
        trackerGroups.setAddToAssignees(BasicDataGenerator.generateRandomInt());
        trackerGroups.setAddVotes(BasicDataGenerator.generateRandomInt());
        trackerGroups.setAssignOthersToSelf(BasicDataGenerator.generateRandomInt());
        trackerGroups.setAssignToSelf(BasicDataGenerator.generateRandomInt());
        trackerGroups.setCloseOtherTasks(BasicDataGenerator.generateRandomInt());
        trackerGroups.setCloseOwnTasks(BasicDataGenerator.generateRandomInt());
        trackerGroups.setCreateAttachments(BasicDataGenerator.generateRandomInt());
        trackerGroups.setDeleteAttachments(BasicDataGenerator.generateRandomInt());
        trackerGroups.setDeleteComments(BasicDataGenerator.generateRandomInt());
        trackerGroups.setEditAssignments(BasicDataGenerator.generateRandomInt());
        trackerGroups.setEditComments(BasicDataGenerator.generateRandomInt());
        trackerGroups.setEditOwnComments(BasicDataGenerator.generateRandomInt());
        trackerGroups.setGroupDesc(BasicDataGenerator.generateRandomString(150));
        trackerGroups.setGroupName(BasicDataGenerator.generateRandomString(20));
        trackerGroups.setGroupOpen(BasicDataGenerator.generateRandomInt());
        trackerGroups.setIsAdmin(BasicDataGenerator.generateRandomInt());
        trackerGroups.setManageProject(BasicDataGenerator.generateRandomInt());
        trackerGroups.setModifyAllTasks(BasicDataGenerator.generateRandomInt());
        trackerGroups.setModifyOwnTasks(BasicDataGenerator.generateRandomInt());
        trackerGroups.setOpenNewTasks(BasicDataGenerator.generateRandomInt());
		if (project != null) {
			project.addTrackerGroups (trackerGroups);
		}
        trackerGroups.setShowAsAssignees(BasicDataGenerator.generateRandomInt());
        trackerGroups.setVersion(BasicDataGenerator.generateRandomInt());
        trackerGroups.setViewComments(BasicDataGenerator.generateRandomInt());
        trackerGroups.setViewHistory(BasicDataGenerator.generateRandomInt());
        trackerGroups.setViewReports(BasicDataGenerator.generateRandomInt());
        trackerGroups.setViewTasks(BasicDataGenerator.generateRandomInt());

        return trackerGroups;
    }

    /**
     * Data pool factory for TrackerHistory.
     * @return TrackerHistory A TrackerHistory object
     */
    public static TrackerHistory getTrackerHistory() {

        TrackerHistory trackerHistory =  getTrackerHistory(
	        getTrackerTasks(), getTrackerUsers());

		return trackerHistory;
       
    }

     /**
     * Data pool factory for TrackerHistory.
     * @param task A valid TrackerTasks object
     * @param user A valid TrackerUsers object
     * @return TrackerHistory A TrackerHistory object
     */
    public static TrackerHistory getTrackerHistory(TrackerTasks task, TrackerUsers user) {
        TrackerHistory trackerHistory = new TrackerHistory();     
        trackerHistory.setEventDate(BasicDataGenerator.generateRandomInt());
        trackerHistory.setEventType(BasicDataGenerator.generateRandomInt());
        trackerHistory.setFieldChanged(BasicDataGenerator.generateRandomString(50));
        trackerHistory.setNewValue(BasicDataGenerator.generateRandomString(21845));
        trackerHistory.setOldValue(BasicDataGenerator.generateRandomString(21845));
		if (task != null) {
			task.addTrackerHistory (trackerHistory);
		}
		if (user != null) {
			user.addTrackerHistory (trackerHistory);
		}
        trackerHistory.setVersion(BasicDataGenerator.generateRandomInt());

        return trackerHistory;
    }

    /**
     * Data pool factory for TrackerListCategory.
     * @return TrackerListCategory A TrackerListCategory object
     */
    public static TrackerListCategory getTrackerListCategory() {

        TrackerListCategory trackerListCategory =  getTrackerListCategory(
	        getTrackerUsers(), getTrackerProjects());

		return trackerListCategory;
       
    }

     /**
     * Data pool factory for TrackerListCategory.
     * @param categoryOwner A valid TrackerUsers object
     * @param project A valid TrackerProjects object
     * @return TrackerListCategory A TrackerListCategory object
     */
    public static TrackerListCategory getTrackerListCategory(TrackerUsers categoryOwner, TrackerProjects project) {
        TrackerListCategory trackerListCategory = new TrackerListCategory();     
        trackerListCategory.setCategoryName(BasicDataGenerator.generateRandomString(30));
		if (categoryOwner != null) {
			categoryOwner.addTrackerListCategory (trackerListCategory);
		}
        trackerListCategory.setLft(BasicDataGenerator.generateRandomLong());
		if (project != null) {
			project.addTrackerListCategory (trackerListCategory);
		}
        trackerListCategory.setRgt(BasicDataGenerator.generateRandomLong());
        trackerListCategory.setShowInList(BasicDataGenerator.generateRandomInt());
        trackerListCategory.setVersion(BasicDataGenerator.generateRandomInt());

        return trackerListCategory;
    }

    /**
     * Data pool factory for TrackerListOs.
     * @return TrackerListOs A TrackerListOs object
     */
    public static TrackerListOs getTrackerListOs() {

        TrackerListOs trackerListOs =  getTrackerListOs(
	        getTrackerProjects());

		return trackerListOs;
       
    }

     /**
     * Data pool factory for TrackerListOs.
     * @param project A valid TrackerProjects object
     * @return TrackerListOs A TrackerListOs object
     */
    public static TrackerListOs getTrackerListOs(TrackerProjects project) {
        TrackerListOs trackerListOs = new TrackerListOs();     
        trackerListOs.setListPosition(BasicDataGenerator.generateRandomInt());
        trackerListOs.setOsName(BasicDataGenerator.generateRandomString(40));
		if (project != null) {
			project.addTrackerListOs (trackerListOs);
		}
        trackerListOs.setShowInList(BasicDataGenerator.generateRandomInt());
        trackerListOs.setVersion(BasicDataGenerator.generateRandomInt());

        return trackerListOs;
    }

    /**
     * Data pool factory for TrackerListResolution.
     * @return TrackerListResolution A TrackerListResolution object
     */
    public static TrackerListResolution getTrackerListResolution() {

        TrackerListResolution trackerListResolution =  getTrackerListResolution(
	        getTrackerProjects());

		return trackerListResolution;
       
    }

     /**
     * Data pool factory for TrackerListResolution.
     * @param project A valid TrackerProjects object
     * @return TrackerListResolution A TrackerListResolution object
     */
    public static TrackerListResolution getTrackerListResolution(TrackerProjects project) {
        TrackerListResolution trackerListResolution = new TrackerListResolution();     
        trackerListResolution.setListPosition(BasicDataGenerator.generateRandomInt());
		if (project != null) {
			project.addTrackerListResolution (trackerListResolution);
		}
        trackerListResolution.setResolutionName(BasicDataGenerator.generateRandomString(30));
        trackerListResolution.setShowInList(BasicDataGenerator.generateRandomInt());
        trackerListResolution.setVersion(BasicDataGenerator.generateRandomInt());

        return trackerListResolution;
    }

    /**
     * Data pool factory for TrackerListStatus.
     * @return TrackerListStatus A TrackerListStatus object
     */
    public static TrackerListStatus getTrackerListStatus() {

        TrackerListStatus trackerListStatus =  getTrackerListStatus(
	        getTrackerProjects());

		return trackerListStatus;
       
    }

     /**
     * Data pool factory for TrackerListStatus.
     * @param project A valid TrackerProjects object
     * @return TrackerListStatus A TrackerListStatus object
     */
    public static TrackerListStatus getTrackerListStatus(TrackerProjects project) {
        TrackerListStatus trackerListStatus = new TrackerListStatus();     
        trackerListStatus.setListPosition(BasicDataGenerator.generateRandomInt());
		if (project != null) {
			project.addTrackerListStatus (trackerListStatus);
		}
        trackerListStatus.setShowInList(BasicDataGenerator.generateRandomInt());
        trackerListStatus.setStatusName(BasicDataGenerator.generateRandomString(40));
        trackerListStatus.setVersion(BasicDataGenerator.generateRandomInt());

        return trackerListStatus;
    }

    /**
     * Data pool factory for TrackerListTasktype.
     * @return TrackerListTasktype A TrackerListTasktype object
     */
    public static TrackerListTasktype getTrackerListTasktype() {

        TrackerListTasktype trackerListTasktype =  getTrackerListTasktype(
	        getTrackerProjects());

		return trackerListTasktype;
       
    }

     /**
     * Data pool factory for TrackerListTasktype.
     * @param project A valid TrackerProjects object
     * @return TrackerListTasktype A TrackerListTasktype object
     */
    public static TrackerListTasktype getTrackerListTasktype(TrackerProjects project) {
        TrackerListTasktype trackerListTasktype = new TrackerListTasktype();     
        trackerListTasktype.setListPosition(BasicDataGenerator.generateRandomInt());
		if (project != null) {
			project.addTrackerListTasktype (trackerListTasktype);
		}
        trackerListTasktype.setShowInList(BasicDataGenerator.generateRandomInt());
        trackerListTasktype.setTasktypeName(BasicDataGenerator.generateRandomString(40));
        trackerListTasktype.setVersion(BasicDataGenerator.generateRandomInt());

        return trackerListTasktype;
    }

    /**
     * Data pool factory for TrackerListVersion.
     * @return TrackerListVersion A TrackerListVersion object
     */
    public static TrackerListVersion getTrackerListVersion() {

        TrackerListVersion trackerListVersion =  getTrackerListVersion(
	        getTrackerProjects());

		return trackerListVersion;
       
    }

     /**
     * Data pool factory for TrackerListVersion.
     * @param project A valid TrackerProjects object
     * @return TrackerListVersion A TrackerListVersion object
     */
    public static TrackerListVersion getTrackerListVersion(TrackerProjects project) {
        TrackerListVersion trackerListVersion = new TrackerListVersion();     
        trackerListVersion.setListPosition(BasicDataGenerator.generateRandomInt());
		if (project != null) {
			project.addTrackerListVersion (trackerListVersion);
		}
        trackerListVersion.setShowInList(BasicDataGenerator.generateRandomInt());
        trackerListVersion.setVersion(BasicDataGenerator.generateRandomInt());
        trackerListVersion.setVersionName(BasicDataGenerator.generateRandomString(40));
        trackerListVersion.setVersionTense(BasicDataGenerator.generateRandomInt());

        return trackerListVersion;
    }

    /**
     * Data pool factory for TrackerLocationGetType.
     * @return TrackerLocationGetTypeA TrackerLocationGetType object
     */
    public static TrackerLocationGetType getTrackerLocationGetType() {

        TrackerLocationGetType trackerLocationGetType = new TrackerLocationGetType();    
        
        trackerLocationGetType.setDescription(BasicDataGenerator.generateRandomString(200));
        trackerLocationGetType.setName(BasicDataGenerator.generateRandomString(20));
        trackerLocationGetType.setVersion(BasicDataGenerator.generateRandomInt());

        return trackerLocationGetType;
    }

    /**
     * Data pool factory for TrackerNotifications.
     * @return TrackerNotifications A TrackerNotifications object
     */
    public static TrackerNotifications getTrackerNotifications() {

        TrackerNotifications trackerNotifications =  getTrackerNotifications(
	        getTrackerTasks(), getTrackerUsers());

		return trackerNotifications;
       
    }

     /**
     * Data pool factory for TrackerNotifications.
     * @param task A valid TrackerTasks object
     * @param user A valid TrackerUsers object
     * @return TrackerNotifications A TrackerNotifications object
     */
    public static TrackerNotifications getTrackerNotifications(TrackerTasks task, TrackerUsers user) {
        TrackerNotifications trackerNotifications = new TrackerNotifications();     
		if (task != null) {
			task.addTrackerNotifications (trackerNotifications);
		}
		if (user != null) {
			user.addTrackerNotifications (trackerNotifications);
		}
        trackerNotifications.setVersion(BasicDataGenerator.generateRandomInt());

        return trackerNotifications;
    }

    /**
     * Data pool factory for TrackerNotificationMessages.
     * @return TrackerNotificationMessagesA TrackerNotificationMessages object
     */
    public static TrackerNotificationMessages getTrackerNotificationMessages() {

        TrackerNotificationMessages trackerNotificationMessages = new TrackerNotificationMessages();    
        
        trackerNotificationMessages.setMessageBody(BasicDataGenerator.generateRandomString(21845));
        trackerNotificationMessages.setMessageSubject(BasicDataGenerator.generateRandomString(21845));
        trackerNotificationMessages.setTimeCreated(BasicDataGenerator.generateRandomInt());
        trackerNotificationMessages.setVersion(BasicDataGenerator.generateRandomInt());

        return trackerNotificationMessages;
    }

    /**
     * Data pool factory for TrackerNotificationRecipients.
     * @return TrackerNotificationRecipients A TrackerNotificationRecipients object
     */
    public static TrackerNotificationRecipients getTrackerNotificationRecipients() {

        TrackerNotificationRecipients trackerNotificationRecipients =  getTrackerNotificationRecipients(
	        getTrackerNotificationMessages());

		return trackerNotificationRecipients;
       
    }

     /**
     * Data pool factory for TrackerNotificationRecipients.
     * @param message A valid TrackerNotificationMessages object
     * @return TrackerNotificationRecipients A TrackerNotificationRecipients object
     */
    public static TrackerNotificationRecipients getTrackerNotificationRecipients(TrackerNotificationMessages message) {
        TrackerNotificationRecipients trackerNotificationRecipients = new TrackerNotificationRecipients();     
		if (message != null) {
			message.addTrackerNotificationRecipients (trackerNotificationRecipients);
		}
        trackerNotificationRecipients.setNotifyAddress(BasicDataGenerator.generateRandomString(100));
        trackerNotificationRecipients.setNotifyMethod(BasicDataGenerator.generateRandomString(1));
        trackerNotificationRecipients.setVersion(BasicDataGenerator.generateRandomInt());

        return trackerNotificationRecipients;
    }

    /**
     * Data pool factory for TrackerPrefs.
     * @return TrackerPrefsA TrackerPrefs object
     */
    public static TrackerPrefs getTrackerPrefs() {

        TrackerPrefs trackerPrefs = new TrackerPrefs();    
        
        trackerPrefs.setPrefName(BasicDataGenerator.generateRandomString(20));
        trackerPrefs.setPrefValue(BasicDataGenerator.generateRandomString(250));
        trackerPrefs.setVersion(BasicDataGenerator.generateRandomInt());

        return trackerPrefs;
    }

    /**
     * Data pool factory for TrackerProjects.
     * @return TrackerProjects A TrackerProjects object
     */
    public static TrackerProjects getTrackerProjects() {

        TrackerProjects trackerProjects =  getTrackerProjects(
	        getTrackerUsers());

		return trackerProjects;
       
    }

     /**
     * Data pool factory for TrackerProjects.
     * @param defaultCatOwner A valid TrackerUsers object
     * @return TrackerProjects A TrackerProjects object
     */
    public static TrackerProjects getTrackerProjects(TrackerUsers defaultCatOwner) {
        TrackerProjects trackerProjects = new TrackerProjects();     
        trackerProjects.setAnonOpen(BasicDataGenerator.generateRandomInt());
        trackerProjects.setAutoAssign(BasicDataGenerator.generateRandomInt());
        trackerProjects.setCommentClosed(BasicDataGenerator.generateRandomInt());
		if (defaultCatOwner != null) {
			defaultCatOwner.addTrackerProjects (trackerProjects);
		}
        trackerProjects.setDefaultEntry(BasicDataGenerator.generateRandomString(8));
        trackerProjects.setDefaultTask(BasicDataGenerator.generateRandomString(21845));
        trackerProjects.setFeedDescription(BasicDataGenerator.generateRandomString(21845));
        trackerProjects.setFeedImgUrl(BasicDataGenerator.generateRandomString(21845));
        trackerProjects.setIntroMessage(BasicDataGenerator.generateRandomString(21845));
        trackerProjects.setLangCode(BasicDataGenerator.generateRandomString(10));
        trackerProjects.setLastUpdated(BasicDataGenerator.generateRandomInt());
        trackerProjects.setNotifyEmail(BasicDataGenerator.generateRandomString(21845));
        trackerProjects.setNotifyJabber(BasicDataGenerator.generateRandomString(21845));
        trackerProjects.setNotifyReply(BasicDataGenerator.generateRandomString(21845));
        trackerProjects.setNotifySubject(BasicDataGenerator.generateRandomString(100));
        trackerProjects.setNotifyTypes(BasicDataGenerator.generateRandomString(100));
        trackerProjects.setOthersView(BasicDataGenerator.generateRandomInt());
        trackerProjects.setProjectIsActive(BasicDataGenerator.generateRandomInt());
        trackerProjects.setProjectTitle(BasicDataGenerator.generateRandomString(100));
        trackerProjects.setThemeStyle(BasicDataGenerator.generateRandomString(20));
        trackerProjects.setVersion(BasicDataGenerator.generateRandomInt());
        trackerProjects.setVisibleColumns(BasicDataGenerator.generateRandomString(255));

        return trackerProjects;
    }

    /**
     * Data pool factory for TrackerRegistrations.
     * @return TrackerRegistrationsA TrackerRegistrations object
     */
    public static TrackerRegistrations getTrackerRegistrations() {

        TrackerRegistrations trackerRegistrations = new TrackerRegistrations();    
        
        trackerRegistrations.setConfirmCode(BasicDataGenerator.generateRandomString(20));
        trackerRegistrations.setEmailAddress(BasicDataGenerator.generateRandomString(100));
        trackerRegistrations.setJabberId(BasicDataGenerator.generateRandomString(100));
        trackerRegistrations.setMagicUrl(BasicDataGenerator.generateRandomString(40));
        trackerRegistrations.setNotifyType(BasicDataGenerator.generateRandomInt());
        trackerRegistrations.setRealName(BasicDataGenerator.generateRandomString(100));
        trackerRegistrations.setRegTime(BasicDataGenerator.generateRandomInt());
        trackerRegistrations.setTimeZone(BasicDataGenerator.generateRandomInt());
        trackerRegistrations.setUserName(BasicDataGenerator.generateRandomString(32));
        trackerRegistrations.setVersion(BasicDataGenerator.generateRandomInt());

        return trackerRegistrations;
    }

    /**
     * Data pool factory for TrackerRelated.
     * @return TrackerRelated A TrackerRelated object
     */
    public static TrackerRelated getTrackerRelated() {

        TrackerRelated trackerRelated =  getTrackerRelated(
	        getTrackerTasks(), getTrackerTasks());

		return trackerRelated;
       
    }

     /**
     * Data pool factory for TrackerRelated.
     * @param relatedTask A valid TrackerTasks object
     * @param thisTask A valid TrackerTasks object
     * @return TrackerRelated A TrackerRelated object
     */
    public static TrackerRelated getTrackerRelated(TrackerTasks relatedTask, TrackerTasks thisTask) {
        TrackerRelated trackerRelated = new TrackerRelated();     
        trackerRelated.setIsDuplicate(BasicDataGenerator.generateRandomInt());
		if (relatedTask != null) {
			relatedTask.addTrackerRelated (trackerRelated);
		}
        trackerRelated.setThisTask(thisTask);
        trackerRelated.setVersion(BasicDataGenerator.generateRandomInt());

        return trackerRelated;
    }

    /**
     * Data pool factory for TrackerReminders.
     * @return TrackerReminders A TrackerReminders object
     */
    public static TrackerReminders getTrackerReminders() {

        TrackerReminders trackerReminders =  getTrackerReminders(
	        getTrackerUsers(), getTrackerTasks(), getTrackerUsers());

		return trackerReminders;
       
    }

     /**
     * Data pool factory for TrackerReminders.
     * @param fromUser A valid TrackerUsers object
     * @param task A valid TrackerTasks object
     * @param toUser A valid TrackerUsers object
     * @return TrackerReminders A TrackerReminders object
     */
    public static TrackerReminders getTrackerReminders(TrackerUsers fromUser, TrackerTasks task, TrackerUsers toUser) {
        TrackerReminders trackerReminders = new TrackerReminders();     
		if (fromUser != null) {
			fromUser.addTrackerReminders (trackerReminders);
		}
        trackerReminders.setHowOften(BasicDataGenerator.generateRandomInt());
        trackerReminders.setLastSent(BasicDataGenerator.generateRandomInt());
        trackerReminders.setReminderMessage(BasicDataGenerator.generateRandomString(21845));
        trackerReminders.setStartTime(BasicDataGenerator.generateRandomInt());
		if (task != null) {
			task.addTrackerReminders (trackerReminders);
		}
        trackerReminders.setToUser(toUser);
        trackerReminders.setVersion(BasicDataGenerator.generateRandomInt());

        return trackerReminders;
    }

    /**
     * Data pool factory for TrackerSearches.
     * @return TrackerSearches A TrackerSearches object
     */
    public static TrackerSearches getTrackerSearches() {

        TrackerSearches trackerSearches =  getTrackerSearches(
	        getTrackerUsers());

		return trackerSearches;
       
    }

     /**
     * Data pool factory for TrackerSearches.
     * @param user A valid TrackerUsers object
     * @return TrackerSearches A TrackerSearches object
     */
    public static TrackerSearches getTrackerSearches(TrackerUsers user) {
        TrackerSearches trackerSearches = new TrackerSearches();     
        trackerSearches.setName(BasicDataGenerator.generateRandomString(50));
        trackerSearches.setSearchString(BasicDataGenerator.generateRandomString(21845));
        trackerSearches.setTime(BasicDataGenerator.generateRandomInt());
		if (user != null) {
			user.addTrackerSearches (trackerSearches);
		}
        trackerSearches.setVersion(BasicDataGenerator.generateRandomInt());

        return trackerSearches;
    }

    /**
     * Data pool factory for TrackerTableChangeLog.
     * @return TrackerTableChangeLogA TrackerTableChangeLog object
     */
    public static TrackerTableChangeLog getTrackerTableChangeLog() {

        TrackerTableChangeLog trackerTableChangeLog = new TrackerTableChangeLog();    
        
        trackerTableChangeLog.setCreateDate(BasicDataGenerator.generateDate());
        trackerTableChangeLog.setIsSent(BasicDataGenerator.generateRandomInt());
        trackerTableChangeLog.setSentDate(BasicDataGenerator.generateDate());
        trackerTableChangeLog.setTableName(BasicDataGenerator.generateRandomString(50));
        trackerTableChangeLog.setTableRowId(BasicDataGenerator.generateRandomInt());

        return trackerTableChangeLog;
    }

    /**
     * Data pool factory for TrackerTasks.
     * @return TrackerTasks A TrackerTasks object
     */
    public static TrackerTasks getTrackerTasks() {

        TrackerTasks trackerTasks =  getTrackerTasks(
	        null, getTrackerUsers(), getTrackerListStatus(), getTrackerUsers(), getTrackerUsers(), getTrackerListOs(), getTrackerListCategory(), getTrackerListVersion(), getTrackerProjects(), getTrackerListResolution(), getTrackerListTasktype());

		return trackerTasks;
       
    }

     /**
     * Data pool factory for TrackerTasks.
     * @param city A valid TrackerCity object
     * @param closedBy A valid TrackerUsers object
     * @param itemStatus A valid TrackerListStatus object
     * @param lastEditedBy A valid TrackerUsers object
     * @param openedBy A valid TrackerUsers object
     * @param operatingSystem A valid TrackerListOs object
     * @param productCategory A valid TrackerListCategory object
     * @param productVersion A valid TrackerListVersion object
     * @param project A valid TrackerProjects object
     * @param resolutionReason A valid TrackerListResolution object
     * @param taskType A valid TrackerListTasktype object
     * @return TrackerTasks A TrackerTasks object
     */
    public static TrackerTasks getTrackerTasks(TrackerCity city, TrackerUsers closedBy, TrackerListStatus itemStatus, TrackerUsers lastEditedBy, TrackerUsers openedBy, TrackerListOs operatingSystem, TrackerListCategory productCategory, TrackerListVersion productVersion, TrackerProjects project, TrackerListResolution resolutionReason, TrackerListTasktype taskType) {
        TrackerTasks trackerTasks = new TrackerTasks();     
        trackerTasks.setAddress(BasicDataGenerator.generateRandomString(21845));
        trackerTasks.setAnonEmail(BasicDataGenerator.generateRandomString(100));
		if (city != null) {
			city.addTrackerTasks (trackerTasks);
		}
        trackerTasks.setClosedbyVersion(BasicDataGenerator.generateRandomInt());
		if (closedBy != null) {
			closedBy.addTrackerTasks (trackerTasks);
		}
        trackerTasks.setClosureComment(BasicDataGenerator.generateRandomString(21845));
        trackerTasks.setDateClosed(BasicDataGenerator.generateRandomInt());
        trackerTasks.setDateOpened(BasicDataGenerator.generateRandomInt());
        trackerTasks.setDetailedDesc(BasicDataGenerator.generateRandomString(21845));
        trackerTasks.setDueDate(BasicDataGenerator.generateRandomInt());
        trackerTasks.setIsClosed(BasicDataGenerator.generateRandomInt());
		if (itemStatus != null) {
			itemStatus.addTrackerTasks (trackerTasks);
		}
        trackerTasks.setItemSummary(BasicDataGenerator.generateRandomString(100));
        trackerTasks.setLastEditedBy(lastEditedBy);
        trackerTasks.setLastEditedTime(BasicDataGenerator.generateRandomInt());
        trackerTasks.setLatitude(BasicDataGenerator.generateRandomString(200));
        trackerTasks.setLongitude(BasicDataGenerator.generateRandomString(200));
        trackerTasks.setMarkPrivate(BasicDataGenerator.generateRandomInt());
        trackerTasks.setOpenedBy(openedBy);
		if (operatingSystem != null) {
			operatingSystem.addTrackerTasks (trackerTasks);
		}
        trackerTasks.setPercentComplete(BasicDataGenerator.generateRandomInt());
		if (productCategory != null) {
			productCategory.addTrackerTasks (trackerTasks);
		}
		if (productVersion != null) {
			productVersion.addTrackerTasks (trackerTasks);
		}
		if (project != null) {
			project.addTrackerTasks (trackerTasks);
		}
		if (resolutionReason != null) {
			resolutionReason.addTrackerTasks (trackerTasks);
		}
        trackerTasks.setTaskPriority(BasicDataGenerator.generateRandomInt());
        trackerTasks.setTaskSeverity(BasicDataGenerator.generateRandomInt());
        trackerTasks.setTaskToken(BasicDataGenerator.generateRandomString(32));
		if (taskType != null) {
			taskType.addTrackerTasks (trackerTasks);
		}
        trackerTasks.setVersion(BasicDataGenerator.generateRandomInt());

        return trackerTasks;
    }

    /**
     * Data pool factory for TrackerUsers.
     * @return TrackerUsersA TrackerUsers object
     */
    public static TrackerUsers getTrackerUsers() {

        TrackerUsers trackerUsers = new TrackerUsers();    
        
        trackerUsers.setAccountEnabled(BasicDataGenerator.generateRandomInt());
        trackerUsers.setDateformat(BasicDataGenerator.generateRandomString(30));
        trackerUsers.setDateformatExtended(BasicDataGenerator.generateRandomString(30));
        trackerUsers.setEmailAddress(BasicDataGenerator.generateRandomString(100));
        trackerUsers.setJabberId(BasicDataGenerator.generateRandomString(100));
        trackerUsers.setLockUntil(BasicDataGenerator.generateRandomInt());
        trackerUsers.setLoginAttempts(BasicDataGenerator.generateRandomInt());
        trackerUsers.setMagicUrl(BasicDataGenerator.generateRandomString(40));
        trackerUsers.setNotifyOwn(BasicDataGenerator.generateRandomInt());
        trackerUsers.setNotifyType(BasicDataGenerator.generateRandomInt());
        trackerUsers.setRealName(BasicDataGenerator.generateRandomString(100));
        trackerUsers.setRegisterDate(BasicDataGenerator.generateRandomInt());
        trackerUsers.setTasksPerpage(BasicDataGenerator.generateRandomInt());
        trackerUsers.setTimeZone(BasicDataGenerator.generateRandomInt());
        trackerUsers.setUserName(BasicDataGenerator.generateRandomString(32));
        trackerUsers.setUserPass(BasicDataGenerator.generateRandomString(40));
        trackerUsers.setVersion(BasicDataGenerator.generateRandomInt());

        return trackerUsers;
    }

    /**
     * Data pool factory for TrackerUsersInGroups.
     * @return TrackerUsersInGroups A TrackerUsersInGroups object
     */
    public static TrackerUsersInGroups getTrackerUsersInGroups() {

        TrackerUsersInGroups trackerUsersInGroups =  getTrackerUsersInGroups(
	        getTrackerGroups(), getTrackerUsers());

		return trackerUsersInGroups;
       
    }

     /**
     * Data pool factory for TrackerUsersInGroups.
     * @param group A valid TrackerGroups object
     * @param user A valid TrackerUsers object
     * @return TrackerUsersInGroups A TrackerUsersInGroups object
     */
    public static TrackerUsersInGroups getTrackerUsersInGroups(TrackerGroups group, TrackerUsers user) {
        TrackerUsersInGroups trackerUsersInGroups = new TrackerUsersInGroups();     
		if (group != null) {
			group.addTrackerUsersInGroups (trackerUsersInGroups);
		}
		if (user != null) {
			user.addTrackerUsersInGroups (trackerUsersInGroups);
		}
        trackerUsersInGroups.setVersion(BasicDataGenerator.generateRandomInt());

        return trackerUsersInGroups;
    }

    /**
     * Data pool factory for TrackerUserLocationLog.
     * @return TrackerUserLocationLog A TrackerUserLocationLog object
     */
    public static TrackerUserLocationLog getTrackerUserLocationLog() {

        TrackerUserLocationLog trackerUserLocationLog =  getTrackerUserLocationLog(
	        getTrackerLocationGetType(), getTrackerUsers());

		return trackerUserLocationLog;
       
    }

     /**
     * Data pool factory for TrackerUserLocationLog.
     * @param locationGetType A valid TrackerLocationGetType object
     * @param user A valid TrackerUsers object
     * @return TrackerUserLocationLog A TrackerUserLocationLog object
     */
    public static TrackerUserLocationLog getTrackerUserLocationLog(TrackerLocationGetType locationGetType, TrackerUsers user) {
        TrackerUserLocationLog trackerUserLocationLog = new TrackerUserLocationLog();     
        trackerUserLocationLog.setCreateDate(BasicDataGenerator.generateRandomInt());
        trackerUserLocationLog.setDeviationShare(BasicDataGenerator.generateRandomString(100));
        trackerUserLocationLog.setLatitude(BasicDataGenerator.generateRandomString(200));
		if (locationGetType != null) {
			locationGetType.addTrackerUserLocationLog (trackerUserLocationLog);
		}
        trackerUserLocationLog.setLongitude(BasicDataGenerator.generateRandomString(200));
		if (user != null) {
			user.addTrackerUserLocationLog (trackerUserLocationLog);
		}

        return trackerUserLocationLog;
    }

    /**
     * Data pool factory for TrackerUserMobileSetting.
     * @return TrackerUserMobileSetting A TrackerUserMobileSetting object
     */
    public static TrackerUserMobileSetting getTrackerUserMobileSetting() {

        TrackerUserMobileSetting trackerUserMobileSetting =  getTrackerUserMobileSetting(
	        getTrackerLocationGetType(), getTrackerUsers());

		return trackerUserMobileSetting;
       
    }

     /**
     * Data pool factory for TrackerUserMobileSetting.
     * @param locationGetType A valid TrackerLocationGetType object
     * @param user A valid TrackerUsers object
     * @return TrackerUserMobileSetting A TrackerUserMobileSetting object
     */
    public static TrackerUserMobileSetting getTrackerUserMobileSetting(TrackerLocationGetType locationGetType, TrackerUsers user) {
        TrackerUserMobileSetting trackerUserMobileSetting = new TrackerUserMobileSetting();     
        trackerUserMobileSetting.setCoordinatPostInterval(BasicDataGenerator.generateRandomInt());
        trackerUserMobileSetting.setIsSentLocation(BasicDataGenerator.generateRandomInt());
		if (locationGetType != null) {
			locationGetType.addTrackerUserMobileSetting (trackerUserMobileSetting);
		}
		if (user != null) {
			user.addTrackerUserMobileSetting (trackerUserMobileSetting);
		}
        trackerUserMobileSetting.setVersion(BasicDataGenerator.generateRandomInt());

        return trackerUserMobileSetting;
    }

    /**
     * Data pool factory for TrackerUserSession.
     * @return TrackerUserSession A TrackerUserSession object
     */
    public static TrackerUserSession getTrackerUserSession() {

        TrackerUserSession trackerUserSession =  getTrackerUserSession(
	        getTrackerUsers());

		return trackerUserSession;
       
    }

     /**
     * Data pool factory for TrackerUserSession.
     * @param user A valid TrackerUsers object
     * @return TrackerUserSession A TrackerUserSession object
     */
    public static TrackerUserSession getTrackerUserSession(TrackerUsers user) {
        TrackerUserSession trackerUserSession = new TrackerUserSession();     
        trackerUserSession.setCreateDate(BasicDataGenerator.generateRandomInt());
        trackerUserSession.setDeviceRegisterKey(BasicDataGenerator.generateRandomString(200));
        trackerUserSession.setExpireDate(BasicDataGenerator.generateRandomInt());
        trackerUserSession.setToken(BasicDataGenerator.generateRandomString(200));
        trackerUserSession.setUpdateDate(BasicDataGenerator.generateRandomInt());
		if (user != null) {
			user.addTrackerUserSession (trackerUserSession);
		}

        return trackerUserSession;
    }

    /**
     * Data pool factory for TrackerVotes.
     * @return TrackerVotes A TrackerVotes object
     */
    public static TrackerVotes getTrackerVotes() {

        TrackerVotes trackerVotes =  getTrackerVotes(
	        getTrackerTasks(), getTrackerUsers());

		return trackerVotes;
       
    }

     /**
     * Data pool factory for TrackerVotes.
     * @param task A valid TrackerTasks object
     * @param user A valid TrackerUsers object
     * @return TrackerVotes A TrackerVotes object
     */
    public static TrackerVotes getTrackerVotes(TrackerTasks task, TrackerUsers user) {
        TrackerVotes trackerVotes = new TrackerVotes();     
        trackerVotes.setDateTime(BasicDataGenerator.generateRandomInt());
		if (task != null) {
			task.addTrackerVotes (trackerVotes);
		}
		if (user != null) {
			user.addTrackerVotes (trackerVotes);
		}
        trackerVotes.setVersion(BasicDataGenerator.generateRandomInt());

        return trackerVotes;
    }
    /** Returns the commit order of this database. 
	 * Useful for iterating through the classes for deletion in the right order. 
	 * @return String[] list of classes
	 */
	public static String[] getDBCommitOrder() {
		return commitOrder;
	}
	
	/**
	 * @param className classname to return
	 * @return the tabledeps for the given class name
	 */
	public static Collection<String> getTabledeps(String className) {
		return tableDeps.get(className);
	}
	
}